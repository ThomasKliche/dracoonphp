<?php
/**
 * SyslogEvent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SyslogEvent Class Doc Comment
 *
 * @category Class
 * @description DEPRECATED Syslog event information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SyslogEvent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SyslogEvent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'time' => '\DateTime',
        'user_id' => 'int',
        'message' => 'string',
        'operation_id' => 'int',
        'operation_name' => 'string',
        'status' => 'int',
        'user_client' => 'string',
        'customer_id' => 'int',
        'user_name' => 'string',
        'user_ip' => 'string',
        'auth_parent_source' => 'string',
        'auth_parent_target' => 'string',
        'object_id1' => 'int',
        'object_type1' => 'int',
        'object_name1' => 'string',
        'object_id2' => 'int',
        'object_type2' => 'int',
        'object_name2' => 'string',
        'attribute1' => 'string',
        'attribute2' => 'string',
        'attribute3' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'time' => 'date-time',
        'user_id' => 'int64',
        'message' => null,
        'operation_id' => 'int32',
        'operation_name' => null,
        'status' => 'int32',
        'user_client' => null,
        'customer_id' => 'int64',
        'user_name' => null,
        'user_ip' => null,
        'auth_parent_source' => null,
        'auth_parent_target' => null,
        'object_id1' => 'int64',
        'object_type1' => 'int32',
        'object_name1' => null,
        'object_id2' => 'int64',
        'object_type2' => 'int32',
        'object_name2' => null,
        'attribute1' => null,
        'attribute2' => null,
        'attribute3' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'time' => 'time',
        'user_id' => 'userId',
        'message' => 'message',
        'operation_id' => 'operationId',
        'operation_name' => 'operationName',
        'status' => 'status',
        'user_client' => 'userClient',
        'customer_id' => 'customerId',
        'user_name' => 'userName',
        'user_ip' => 'userIp',
        'auth_parent_source' => 'authParentSource',
        'auth_parent_target' => 'authParentTarget',
        'object_id1' => 'objectId1',
        'object_type1' => 'objectType1',
        'object_name1' => 'objectName1',
        'object_id2' => 'objectId2',
        'object_type2' => 'objectType2',
        'object_name2' => 'objectName2',
        'attribute1' => 'attribute1',
        'attribute2' => 'attribute2',
        'attribute3' => 'attribute3'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'time' => 'setTime',
        'user_id' => 'setUserId',
        'message' => 'setMessage',
        'operation_id' => 'setOperationId',
        'operation_name' => 'setOperationName',
        'status' => 'setStatus',
        'user_client' => 'setUserClient',
        'customer_id' => 'setCustomerId',
        'user_name' => 'setUserName',
        'user_ip' => 'setUserIp',
        'auth_parent_source' => 'setAuthParentSource',
        'auth_parent_target' => 'setAuthParentTarget',
        'object_id1' => 'setObjectId1',
        'object_type1' => 'setObjectType1',
        'object_name1' => 'setObjectName1',
        'object_id2' => 'setObjectId2',
        'object_type2' => 'setObjectType2',
        'object_name2' => 'setObjectName2',
        'attribute1' => 'setAttribute1',
        'attribute2' => 'setAttribute2',
        'attribute3' => 'setAttribute3'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'time' => 'getTime',
        'user_id' => 'getUserId',
        'message' => 'getMessage',
        'operation_id' => 'getOperationId',
        'operation_name' => 'getOperationName',
        'status' => 'getStatus',
        'user_client' => 'getUserClient',
        'customer_id' => 'getCustomerId',
        'user_name' => 'getUserName',
        'user_ip' => 'getUserIp',
        'auth_parent_source' => 'getAuthParentSource',
        'auth_parent_target' => 'getAuthParentTarget',
        'object_id1' => 'getObjectId1',
        'object_type1' => 'getObjectType1',
        'object_name1' => 'getObjectName1',
        'object_id2' => 'getObjectId2',
        'object_type2' => 'getObjectType2',
        'object_name2' => 'getObjectName2',
        'attribute1' => 'getAttribute1',
        'attribute2' => 'getAttribute2',
        'attribute3' => 'getAttribute3'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_0 = 0;
    const STATUS_2 = 2;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_0,
            self::STATUS_2,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['time'] = isset($data['time']) ? $data['time'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['operation_id'] = isset($data['operation_id']) ? $data['operation_id'] : null;
        $this->container['operation_name'] = isset($data['operation_name']) ? $data['operation_name'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['user_client'] = isset($data['user_client']) ? $data['user_client'] : null;
        $this->container['customer_id'] = isset($data['customer_id']) ? $data['customer_id'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['user_ip'] = isset($data['user_ip']) ? $data['user_ip'] : null;
        $this->container['auth_parent_source'] = isset($data['auth_parent_source']) ? $data['auth_parent_source'] : null;
        $this->container['auth_parent_target'] = isset($data['auth_parent_target']) ? $data['auth_parent_target'] : null;
        $this->container['object_id1'] = isset($data['object_id1']) ? $data['object_id1'] : null;
        $this->container['object_type1'] = isset($data['object_type1']) ? $data['object_type1'] : null;
        $this->container['object_name1'] = isset($data['object_name1']) ? $data['object_name1'] : null;
        $this->container['object_id2'] = isset($data['object_id2']) ? $data['object_id2'] : null;
        $this->container['object_type2'] = isset($data['object_type2']) ? $data['object_type2'] : null;
        $this->container['object_name2'] = isset($data['object_name2']) ? $data['object_name2'] : null;
        $this->container['attribute1'] = isset($data['attribute1']) ? $data['attribute1'] : null;
        $this->container['attribute2'] = isset($data['attribute2']) ? $data['attribute2'] : null;
        $this->container['attribute3'] = isset($data['attribute3']) ? $data['attribute3'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['time'] === null) {
            $invalidProperties[] = "'time' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['message'] === null) {
            $invalidProperties[] = "'message' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Event ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets time
     *
     * @return \DateTime
     */
    public function getTime()
    {
        return $this->container['time'];
    }

    /**
     * Sets time
     *
     * @param \DateTime $time Event timestamp
     *
     * @return $this
     */
    public function setTime($time)
    {
        $this->container['time'] = $time;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id Unique identifier for the user
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message Event description
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets operation_id
     *
     * @return int
     */
    public function getOperationId()
    {
        return $this->container['operation_id'];
    }

    /**
     * Sets operation_id
     *
     * @param int $operation_id Operation type ID
     *
     * @return $this
     */
    public function setOperationId($operation_id)
    {
        $this->container['operation_id'] = $operation_id;

        return $this;
    }

    /**
     * Gets operation_name
     *
     * @return string
     */
    public function getOperationName()
    {
        return $this->container['operation_name'];
    }

    /**
     * Sets operation_name
     *
     * @param string $operation_name Operation name
     *
     * @return $this
     */
    public function setOperationName($operation_name)
    {
        $this->container['operation_name'] = $operation_name;

        return $this;
    }

    /**
     * Gets status
     *
     * @return int
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param int $status Operation status: * `0` - Success * `2` - Error
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($status) && !in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets user_client
     *
     * @return string
     */
    public function getUserClient()
    {
        return $this->container['user_client'];
    }

    /**
     * Sets user_client
     *
     * @param string $user_client Client
     *
     * @return $this
     */
    public function setUserClient($user_client)
    {
        $this->container['user_client'] = $user_client;

        return $this;
    }

    /**
     * Gets customer_id
     *
     * @return int
     */
    public function getCustomerId()
    {
        return $this->container['customer_id'];
    }

    /**
     * Sets customer_id
     *
     * @param int $customer_id Unique identifier for the customer
     *
     * @return $this
     */
    public function setCustomerId($customer_id)
    {
        $this->container['customer_id'] = $customer_id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name Username
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets user_ip
     *
     * @return string
     */
    public function getUserIp()
    {
        return $this->container['user_ip'];
    }

    /**
     * Sets user_ip
     *
     * @param string $user_ip User IP
     *
     * @return $this
     */
    public function setUserIp($user_ip)
    {
        $this->container['user_ip'] = $user_ip;

        return $this;
    }

    /**
     * Gets auth_parent_source
     *
     * @return string
     */
    public function getAuthParentSource()
    {
        return $this->container['auth_parent_source'];
    }

    /**
     * Sets auth_parent_source
     *
     * @param string $auth_parent_source Auth parent source ID
     *
     * @return $this
     */
    public function setAuthParentSource($auth_parent_source)
    {
        $this->container['auth_parent_source'] = $auth_parent_source;

        return $this;
    }

    /**
     * Gets auth_parent_target
     *
     * @return string
     */
    public function getAuthParentTarget()
    {
        return $this->container['auth_parent_target'];
    }

    /**
     * Sets auth_parent_target
     *
     * @param string $auth_parent_target Auth parent target ID
     *
     * @return $this
     */
    public function setAuthParentTarget($auth_parent_target)
    {
        $this->container['auth_parent_target'] = $auth_parent_target;

        return $this;
    }

    /**
     * Gets object_id1
     *
     * @return int
     */
    public function getObjectId1()
    {
        return $this->container['object_id1'];
    }

    /**
     * Sets object_id1
     *
     * @param int $object_id1 Object ID 1
     *
     * @return $this
     */
    public function setObjectId1($object_id1)
    {
        $this->container['object_id1'] = $object_id1;

        return $this;
    }

    /**
     * Gets object_type1
     *
     * @return int
     */
    public function getObjectType1()
    {
        return $this->container['object_type1'];
    }

    /**
     * Sets object_type1
     *
     * @param int $object_type1 Object type 1
     *
     * @return $this
     */
    public function setObjectType1($object_type1)
    {
        $this->container['object_type1'] = $object_type1;

        return $this;
    }

    /**
     * Gets object_name1
     *
     * @return string
     */
    public function getObjectName1()
    {
        return $this->container['object_name1'];
    }

    /**
     * Sets object_name1
     *
     * @param string $object_name1 Object name 1
     *
     * @return $this
     */
    public function setObjectName1($object_name1)
    {
        $this->container['object_name1'] = $object_name1;

        return $this;
    }

    /**
     * Gets object_id2
     *
     * @return int
     */
    public function getObjectId2()
    {
        return $this->container['object_id2'];
    }

    /**
     * Sets object_id2
     *
     * @param int $object_id2 Object ID 2
     *
     * @return $this
     */
    public function setObjectId2($object_id2)
    {
        $this->container['object_id2'] = $object_id2;

        return $this;
    }

    /**
     * Gets object_type2
     *
     * @return int
     */
    public function getObjectType2()
    {
        return $this->container['object_type2'];
    }

    /**
     * Sets object_type2
     *
     * @param int $object_type2 Object type 2
     *
     * @return $this
     */
    public function setObjectType2($object_type2)
    {
        $this->container['object_type2'] = $object_type2;

        return $this;
    }

    /**
     * Gets object_name2
     *
     * @return string
     */
    public function getObjectName2()
    {
        return $this->container['object_name2'];
    }

    /**
     * Sets object_name2
     *
     * @param string $object_name2 Object type 2
     *
     * @return $this
     */
    public function setObjectName2($object_name2)
    {
        $this->container['object_name2'] = $object_name2;

        return $this;
    }

    /**
     * Gets attribute1
     *
     * @return string
     */
    public function getAttribute1()
    {
        return $this->container['attribute1'];
    }

    /**
     * Sets attribute1
     *
     * @param string $attribute1 Attribute 1
     *
     * @return $this
     */
    public function setAttribute1($attribute1)
    {
        $this->container['attribute1'] = $attribute1;

        return $this;
    }

    /**
     * Gets attribute2
     *
     * @return string
     */
    public function getAttribute2()
    {
        return $this->container['attribute2'];
    }

    /**
     * Sets attribute2
     *
     * @param string $attribute2 Attribute 2
     *
     * @return $this
     */
    public function setAttribute2($attribute2)
    {
        $this->container['attribute2'] = $attribute2;

        return $this;
    }

    /**
     * Gets attribute3
     *
     * @return string
     */
    public function getAttribute3()
    {
        return $this->container['attribute3'];
    }

    /**
     * Sets attribute3
     *
     * @param string $attribute3 Attribute 3
     *
     * @return $this
     */
    public function setAttribute3($attribute3)
    {
        $this->container['attribute3'] = $attribute3;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


