<?php
/**
 * TestActiveDirectoryConfigResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TestActiveDirectoryConfigResponse Class Doc Comment
 *
 * @category Class
 * @description Response model for testing connection for Active Directory configuration
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TestActiveDirectoryConfigResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TestActiveDirectoryConfigResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'server_ip' => 'string',
        'server_port' => 'int',
        'server_admin_name' => 'string',
        'server_admin_password' => 'string',
        'ldap_users_domain' => 'string',
        'use_ldaps' => 'bool',
        'ssl_finger_print' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'server_ip' => null,
        'server_port' => 'int32',
        'server_admin_name' => null,
        'server_admin_password' => null,
        'ldap_users_domain' => null,
        'use_ldaps' => null,
        'ssl_finger_print' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'server_ip' => 'serverIp',
        'server_port' => 'serverPort',
        'server_admin_name' => 'serverAdminName',
        'server_admin_password' => 'serverAdminPassword',
        'ldap_users_domain' => 'ldapUsersDomain',
        'use_ldaps' => 'useLdaps',
        'ssl_finger_print' => 'sslFingerPrint'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'server_ip' => 'setServerIp',
        'server_port' => 'setServerPort',
        'server_admin_name' => 'setServerAdminName',
        'server_admin_password' => 'setServerAdminPassword',
        'ldap_users_domain' => 'setLdapUsersDomain',
        'use_ldaps' => 'setUseLdaps',
        'ssl_finger_print' => 'setSslFingerPrint'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'server_ip' => 'getServerIp',
        'server_port' => 'getServerPort',
        'server_admin_name' => 'getServerAdminName',
        'server_admin_password' => 'getServerAdminPassword',
        'ldap_users_domain' => 'getLdapUsersDomain',
        'use_ldaps' => 'getUseLdaps',
        'ssl_finger_print' => 'getSslFingerPrint'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['server_ip'] = isset($data['server_ip']) ? $data['server_ip'] : null;
        $this->container['server_port'] = isset($data['server_port']) ? $data['server_port'] : null;
        $this->container['server_admin_name'] = isset($data['server_admin_name']) ? $data['server_admin_name'] : null;
        $this->container['server_admin_password'] = isset($data['server_admin_password']) ? $data['server_admin_password'] : null;
        $this->container['ldap_users_domain'] = isset($data['ldap_users_domain']) ? $data['ldap_users_domain'] : null;
        $this->container['use_ldaps'] = isset($data['use_ldaps']) ? $data['use_ldaps'] : null;
        $this->container['ssl_finger_print'] = isset($data['ssl_finger_print']) ? $data['ssl_finger_print'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['server_ip'] === null) {
            $invalidProperties[] = "'server_ip' can't be null";
        }
        if ($this->container['server_port'] === null) {
            $invalidProperties[] = "'server_port' can't be null";
        }
        if ($this->container['server_admin_name'] === null) {
            $invalidProperties[] = "'server_admin_name' can't be null";
        }
        if ($this->container['server_admin_password'] === null) {
            $invalidProperties[] = "'server_admin_password' can't be null";
        }
        if ($this->container['ldap_users_domain'] === null) {
            $invalidProperties[] = "'ldap_users_domain' can't be null";
        }
        if ($this->container['use_ldaps'] === null) {
            $invalidProperties[] = "'use_ldaps' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets server_ip
     *
     * @return string
     */
    public function getServerIp()
    {
        return $this->container['server_ip'];
    }

    /**
     * Sets server_ip
     *
     * @param string $server_ip IPv4 or IPv6 address or host name
     *
     * @return $this
     */
    public function setServerIp($server_ip)
    {
        $this->container['server_ip'] = $server_ip;

        return $this;
    }

    /**
     * Gets server_port
     *
     * @return int
     */
    public function getServerPort()
    {
        return $this->container['server_port'];
    }

    /**
     * Sets server_port
     *
     * @param int $server_port Port
     *
     * @return $this
     */
    public function setServerPort($server_port)
    {
        $this->container['server_port'] = $server_port;

        return $this;
    }

    /**
     * Gets server_admin_name
     *
     * @return string
     */
    public function getServerAdminName()
    {
        return $this->container['server_admin_name'];
    }

    /**
     * Sets server_admin_name
     *
     * @param string $server_admin_name Distinguished Name (DN) of Active Directory administrative account
     *
     * @return $this
     */
    public function setServerAdminName($server_admin_name)
    {
        $this->container['server_admin_name'] = $server_admin_name;

        return $this;
    }

    /**
     * Gets server_admin_password
     *
     * @return string
     */
    public function getServerAdminPassword()
    {
        return $this->container['server_admin_password'];
    }

    /**
     * Sets server_admin_password
     *
     * @param string $server_admin_password Password of Active Directory administrative account
     *
     * @return $this
     */
    public function setServerAdminPassword($server_admin_password)
    {
        $this->container['server_admin_password'] = $server_admin_password;

        return $this;
    }

    /**
     * Gets ldap_users_domain
     *
     * @return string
     */
    public function getLdapUsersDomain()
    {
        return $this->container['ldap_users_domain'];
    }

    /**
     * Sets ldap_users_domain
     *
     * @param string $ldap_users_domain Search scope of Active Directory; only users below this node can log on.
     *
     * @return $this
     */
    public function setLdapUsersDomain($ldap_users_domain)
    {
        $this->container['ldap_users_domain'] = $ldap_users_domain;

        return $this;
    }

    /**
     * Gets use_ldaps
     *
     * @return bool
     */
    public function getUseLdaps()
    {
        return $this->container['use_ldaps'];
    }

    /**
     * Sets use_ldaps
     *
     * @param bool $use_ldaps Determines whether LDAPS should be used instead of plain LDAP.
     *
     * @return $this
     */
    public function setUseLdaps($use_ldaps)
    {
        $this->container['use_ldaps'] = $use_ldaps;

        return $this;
    }

    /**
     * Gets ssl_finger_print
     *
     * @return string
     */
    public function getSslFingerPrint()
    {
        return $this->container['ssl_finger_print'];
    }

    /**
     * Sets ssl_finger_print
     *
     * @param string $ssl_finger_print SSL finger print of Active Directory server. Mandatory for LDAPS connections. Format: `Algorithm/Fingerprint`
     *
     * @return $this
     */
    public function setSslFingerPrint($ssl_finger_print)
    {
        $this->container['ssl_finger_print'] = $ssl_finger_print;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


