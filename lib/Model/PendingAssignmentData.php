<?php
/**
 * PendingAssignmentData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PendingAssignmentData Class Doc Comment
 *
 * @category Class
 * @description Pending assignment information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PendingAssignmentData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PendingAssignmentData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'room_id' => 'int',
        'state' => 'string',
        'user_info' => '\Swagger\Client\Model\UserInfo',
        'group_info' => '\Swagger\Client\Model\GroupInfo',
        'pending_user_data' => '\Swagger\Client\Model\PendingUserData',
        'pending_group_data' => '\Swagger\Client\Model\PendingGroupData',
        'user_id' => 'int',
        'group_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'room_id' => 'int64',
        'state' => null,
        'user_info' => null,
        'group_info' => null,
        'pending_user_data' => null,
        'pending_group_data' => null,
        'user_id' => 'int64',
        'group_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'room_id' => 'roomId',
        'state' => 'state',
        'user_info' => 'userInfo',
        'group_info' => 'groupInfo',
        'pending_user_data' => 'pendingUserData',
        'pending_group_data' => 'pendingGroupData',
        'user_id' => 'userId',
        'group_id' => 'groupId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'room_id' => 'setRoomId',
        'state' => 'setState',
        'user_info' => 'setUserInfo',
        'group_info' => 'setGroupInfo',
        'pending_user_data' => 'setPendingUserData',
        'pending_group_data' => 'setPendingGroupData',
        'user_id' => 'setUserId',
        'group_id' => 'setGroupId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'room_id' => 'getRoomId',
        'state' => 'getState',
        'user_info' => 'getUserInfo',
        'group_info' => 'getGroupInfo',
        'pending_user_data' => 'getPendingUserData',
        'pending_group_data' => 'getPendingGroupData',
        'user_id' => 'getUserId',
        'group_id' => 'getGroupId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATE_ACCEPTED = 'ACCEPTED';
    const STATE_WAITING = 'WAITING';
    const STATE_DENIED = 'DENIED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStateAllowableValues()
    {
        return [
            self::STATE_ACCEPTED,
            self::STATE_WAITING,
            self::STATE_DENIED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['room_id'] = isset($data['room_id']) ? $data['room_id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['user_info'] = isset($data['user_info']) ? $data['user_info'] : null;
        $this->container['group_info'] = isset($data['group_info']) ? $data['group_info'] : null;
        $this->container['pending_user_data'] = isset($data['pending_user_data']) ? $data['pending_user_data'] : null;
        $this->container['pending_group_data'] = isset($data['pending_group_data']) ? $data['pending_group_data'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['room_id'] === null) {
            $invalidProperties[] = "'room_id' can't be null";
        }
        if ($this->container['state'] === null) {
            $invalidProperties[] = "'state' can't be null";
        }
        $allowedValues = $this->getStateAllowableValues();
        if (!is_null($this->container['state']) && !in_array($this->container['state'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'state', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['user_info'] === null) {
            $invalidProperties[] = "'user_info' can't be null";
        }
        if ($this->container['group_info'] === null) {
            $invalidProperties[] = "'group_info' can't be null";
        }
        if ($this->container['pending_user_data'] === null) {
            $invalidProperties[] = "'pending_user_data' can't be null";
        }
        if ($this->container['pending_group_data'] === null) {
            $invalidProperties[] = "'pending_group_data' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets room_id
     *
     * @return int
     */
    public function getRoomId()
    {
        return $this->container['room_id'];
    }

    /**
     * Sets room_id
     *
     * @param int $room_id Room ID
     *
     * @return $this
     */
    public function setRoomId($room_id)
    {
        $this->container['room_id'] = $room_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state Acceptance state: * `ACCEPTED` * `WAITING` * `DENIED`
     *
     * @return $this
     */
    public function setState($state)
    {
        $allowedValues = $this->getStateAllowableValues();
        if (!in_array($state, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'state', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets user_info
     *
     * @return \Swagger\Client\Model\UserInfo
     */
    public function getUserInfo()
    {
        return $this->container['user_info'];
    }

    /**
     * Sets user_info
     *
     * @param \Swagger\Client\Model\UserInfo $user_info Information about pending users  [Since version 4.11.0]
     *
     * @return $this
     */
    public function setUserInfo($user_info)
    {
        $this->container['user_info'] = $user_info;

        return $this;
    }

    /**
     * Gets group_info
     *
     * @return \Swagger\Client\Model\GroupInfo
     */
    public function getGroupInfo()
    {
        return $this->container['group_info'];
    }

    /**
     * Sets group_info
     *
     * @param \Swagger\Client\Model\GroupInfo $group_info Information about group with pending assignment option  [Since version 4.11.0]
     *
     * @return $this
     */
    public function setGroupInfo($group_info)
    {
        $this->container['group_info'] = $group_info;

        return $this;
    }

    /**
     * Gets pending_user_data
     *
     * @return \Swagger\Client\Model\PendingUserData
     */
    public function getPendingUserData()
    {
        return $this->container['pending_user_data'];
    }

    /**
     * Sets pending_user_data
     *
     * @param \Swagger\Client\Model\PendingUserData $pending_user_data `DEPRECATED`: Information about pending users use `userInfo` instead  [Deprecated since version 4.11.0]
     *
     * @return $this
     */
    public function setPendingUserData($pending_user_data)
    {
        $this->container['pending_user_data'] = $pending_user_data;

        return $this;
    }

    /**
     * Gets pending_group_data
     *
     * @return \Swagger\Client\Model\PendingGroupData
     */
    public function getPendingGroupData()
    {
        return $this->container['pending_group_data'];
    }

    /**
     * Sets pending_group_data
     *
     * @param \Swagger\Client\Model\PendingGroupData $pending_group_data `DEPRECATED`: Information about group with pending assignment option use `groupInfo` instead  [Deprecated since version 4.11.0]
     *
     * @return $this
     */
    public function setPendingGroupData($pending_group_data)
    {
        $this->container['pending_group_data'] = $pending_group_data;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id `DEPRECATED`: Unique identifier for the user use `id` from `UserInfo` instead  [Deprecated since version 4.2.0]
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id `DEPRECATED`: Unique identifier for the group use `id` from `GroupInfo` instead  [Deprecated since version 4.2.0]
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


