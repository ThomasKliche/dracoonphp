<?php
/**
 * PublicUploadShare
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PublicUploadShare Class Doc Comment
 *
 * @category Class
 * @description Upload Share information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublicUploadShare implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PublicUploadShare';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_protected' => 'bool',
        'created_at' => '\DateTime',
        'max_slots' => 'int',
        'name' => 'string',
        'is_encrypted' => 'bool',
        'expire_at' => '\DateTime',
        'notes' => 'string',
        'uploaded_files' => '\Swagger\Client\Model\PublicUploadedFileData[]',
        'user_user_public_key_list' => '\Swagger\Client\Model\UserUserPublicKeyList',
        'show_uploaded_files' => 'bool',
        'remaining_size' => 'int',
        'remaining_slots' => 'int',
        'creator_name' => 'string',
        'creator_username' => 'string',
        'max_size' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_protected' => null,
        'created_at' => 'date-time',
        'max_slots' => 'int32',
        'name' => null,
        'is_encrypted' => null,
        'expire_at' => 'date-time',
        'notes' => null,
        'uploaded_files' => null,
        'user_user_public_key_list' => null,
        'show_uploaded_files' => null,
        'remaining_size' => 'int64',
        'remaining_slots' => 'int32',
        'creator_name' => null,
        'creator_username' => null,
        'max_size' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_protected' => 'isProtected',
        'created_at' => 'createdAt',
        'max_slots' => 'maxSlots',
        'name' => 'name',
        'is_encrypted' => 'isEncrypted',
        'expire_at' => 'expireAt',
        'notes' => 'notes',
        'uploaded_files' => 'uploadedFiles',
        'user_user_public_key_list' => 'userUserPublicKeyList',
        'show_uploaded_files' => 'showUploadedFiles',
        'remaining_size' => 'remainingSize',
        'remaining_slots' => 'remainingSlots',
        'creator_name' => 'creatorName',
        'creator_username' => 'creatorUsername',
        'max_size' => 'maxSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_protected' => 'setIsProtected',
        'created_at' => 'setCreatedAt',
        'max_slots' => 'setMaxSlots',
        'name' => 'setName',
        'is_encrypted' => 'setIsEncrypted',
        'expire_at' => 'setExpireAt',
        'notes' => 'setNotes',
        'uploaded_files' => 'setUploadedFiles',
        'user_user_public_key_list' => 'setUserUserPublicKeyList',
        'show_uploaded_files' => 'setShowUploadedFiles',
        'remaining_size' => 'setRemainingSize',
        'remaining_slots' => 'setRemainingSlots',
        'creator_name' => 'setCreatorName',
        'creator_username' => 'setCreatorUsername',
        'max_size' => 'setMaxSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_protected' => 'getIsProtected',
        'created_at' => 'getCreatedAt',
        'max_slots' => 'getMaxSlots',
        'name' => 'getName',
        'is_encrypted' => 'getIsEncrypted',
        'expire_at' => 'getExpireAt',
        'notes' => 'getNotes',
        'uploaded_files' => 'getUploadedFiles',
        'user_user_public_key_list' => 'getUserUserPublicKeyList',
        'show_uploaded_files' => 'getShowUploadedFiles',
        'remaining_size' => 'getRemainingSize',
        'remaining_slots' => 'getRemainingSlots',
        'creator_name' => 'getCreatorName',
        'creator_username' => 'getCreatorUsername',
        'max_size' => 'getMaxSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_protected'] = isset($data['is_protected']) ? $data['is_protected'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['max_slots'] = isset($data['max_slots']) ? $data['max_slots'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['is_encrypted'] = isset($data['is_encrypted']) ? $data['is_encrypted'] : null;
        $this->container['expire_at'] = isset($data['expire_at']) ? $data['expire_at'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['uploaded_files'] = isset($data['uploaded_files']) ? $data['uploaded_files'] : null;
        $this->container['user_user_public_key_list'] = isset($data['user_user_public_key_list']) ? $data['user_user_public_key_list'] : null;
        $this->container['show_uploaded_files'] = isset($data['show_uploaded_files']) ? $data['show_uploaded_files'] : null;
        $this->container['remaining_size'] = isset($data['remaining_size']) ? $data['remaining_size'] : null;
        $this->container['remaining_slots'] = isset($data['remaining_slots']) ? $data['remaining_slots'] : null;
        $this->container['creator_name'] = isset($data['creator_name']) ? $data['creator_name'] : null;
        $this->container['creator_username'] = isset($data['creator_username']) ? $data['creator_username'] : null;
        $this->container['max_size'] = isset($data['max_size']) ? $data['max_size'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_protected'] === null) {
            $invalidProperties[] = "'is_protected' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['max_slots'] === null) {
            $invalidProperties[] = "'max_slots' can't be null";
        }
        if ($this->container['creator_name'] === null) {
            $invalidProperties[] = "'creator_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_protected
     *
     * @return bool
     */
    public function getIsProtected()
    {
        return $this->container['is_protected'];
    }

    /**
     * Sets is_protected
     *
     * @param bool $is_protected Is share protected by password
     *
     * @return $this
     */
    public function setIsProtected($is_protected)
    {
        $this->container['is_protected'] = $is_protected;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets max_slots
     *
     * @return int
     */
    public function getMaxSlots()
    {
        return $this->container['max_slots'];
    }

    /**
     * Sets max_slots
     *
     * @param int $max_slots `DEPRECATED`: Maximal amount of files to upload  [Deprecated since version 4.2.0]
     *
     * @return $this
     */
    public function setMaxSlots($max_slots)
    {
        $this->container['max_slots'] = $max_slots;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Share display name (alias name)
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_encrypted
     *
     * @return bool
     */
    public function getIsEncrypted()
    {
        return $this->container['is_encrypted'];
    }

    /**
     * Sets is_encrypted
     *
     * @param bool $is_encrypted Encryption state
     *
     * @return $this
     */
    public function setIsEncrypted($is_encrypted)
    {
        $this->container['is_encrypted'] = $is_encrypted;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return \DateTime
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param \DateTime $expire_at Expiration date
     *
     * @return $this
     */
    public function setExpireAt($expire_at)
    {
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes User notes (limited to 255 characters)
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets uploaded_files
     *
     * @return \Swagger\Client\Model\PublicUploadedFileData[]
     */
    public function getUploadedFiles()
    {
        return $this->container['uploaded_files'];
    }

    /**
     * Sets uploaded_files
     *
     * @param \Swagger\Client\Model\PublicUploadedFileData[] $uploaded_files List of (public) uploaded files
     *
     * @return $this
     */
    public function setUploadedFiles($uploaded_files)
    {
        $this->container['uploaded_files'] = $uploaded_files;

        return $this;
    }

    /**
     * Gets user_user_public_key_list
     *
     * @return \Swagger\Client\Model\UserUserPublicKeyList
     */
    public function getUserUserPublicKeyList()
    {
        return $this->container['user_user_public_key_list'];
    }

    /**
     * Sets user_user_public_key_list
     *
     * @param \Swagger\Client\Model\UserUserPublicKeyList $user_user_public_key_list List of user public keys
     *
     * @return $this
     */
    public function setUserUserPublicKeyList($user_user_public_key_list)
    {
        $this->container['user_user_public_key_list'] = $user_user_public_key_list;

        return $this;
    }

    /**
     * Gets show_uploaded_files
     *
     * @return bool
     */
    public function getShowUploadedFiles()
    {
        return $this->container['show_uploaded_files'];
    }

    /**
     * Sets show_uploaded_files
     *
     * @param bool $show_uploaded_files Allow display of already uploaded files
     *
     * @return $this
     */
    public function setShowUploadedFiles($show_uploaded_files)
    {
        $this->container['show_uploaded_files'] = $show_uploaded_files;

        return $this;
    }

    /**
     * Gets remaining_size
     *
     * @return int
     */
    public function getRemainingSize()
    {
        return $this->container['remaining_size'];
    }

    /**
     * Sets remaining_size
     *
     * @param int $remaining_size Remaining Size
     *
     * @return $this
     */
    public function setRemainingSize($remaining_size)
    {
        $this->container['remaining_size'] = $remaining_size;

        return $this;
    }

    /**
     * Gets remaining_slots
     *
     * @return int
     */
    public function getRemainingSlots()
    {
        return $this->container['remaining_slots'];
    }

    /**
     * Sets remaining_slots
     *
     * @param int $remaining_slots Remaining Slots
     *
     * @return $this
     */
    public function setRemainingSlots($remaining_slots)
    {
        $this->container['remaining_slots'] = $remaining_slots;

        return $this;
    }

    /**
     * Gets creator_name
     *
     * @return string
     */
    public function getCreatorName()
    {
        return $this->container['creator_name'];
    }

    /**
     * Sets creator_name
     *
     * @param string $creator_name Creator name  [Since version 4.11.0]
     *
     * @return $this
     */
    public function setCreatorName($creator_name)
    {
        $this->container['creator_name'] = $creator_name;

        return $this;
    }

    /**
     * Gets creator_username
     *
     * @return string
     */
    public function getCreatorUsername()
    {
        return $this->container['creator_username'];
    }

    /**
     * Sets creator_username
     *
     * @param string $creator_username Creator username  [Since version 4.11.0]
     *
     * @return $this
     */
    public function setCreatorUsername($creator_username)
    {
        $this->container['creator_username'] = $creator_username;

        return $this;
    }

    /**
     * Gets max_size
     *
     * @return double
     */
    public function getMaxSize()
    {
        return $this->container['max_size'];
    }

    /**
     * Sets max_size
     *
     * @param double $max_size `DEPRECATED`: Maximal total size of uploaded files (in bytes)  [Deprecated since version 4.2.0]
     *
     * @return $this
     */
    public function setMaxSize($max_size)
    {
        $this->container['max_size'] = $max_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


