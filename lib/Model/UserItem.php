<?php
/**
 * UserItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UserItem Class Doc Comment
 *
 * @category Class
 * @description User information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'user_name' => 'string',
        'first_name' => 'string',
        'last_name' => 'string',
        'is_locked' => 'bool',
        'has_manageable_rooms' => 'bool',
        'avatar_uuid' => 'string',
        'lock_status' => 'int',
        'login' => 'string',
        'title' => 'string',
        'created_at' => '\DateTime',
        'last_login_success_at' => '\DateTime',
        'expire_at' => '\DateTime',
        'is_encryption_enabled' => 'bool',
        'email' => 'string',
        'phone' => 'string',
        'home_room_id' => 'int',
        'user_roles' => '\Swagger\Client\Model\RoleList',
        'user_attributes' => '\Swagger\Client\Model\UserAttributes',
        'gender' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'user_name' => null,
        'first_name' => null,
        'last_name' => null,
        'is_locked' => null,
        'has_manageable_rooms' => null,
        'avatar_uuid' => null,
        'lock_status' => 'int32',
        'login' => null,
        'title' => null,
        'created_at' => 'date-time',
        'last_login_success_at' => 'date-time',
        'expire_at' => 'date-time',
        'is_encryption_enabled' => null,
        'email' => null,
        'phone' => null,
        'home_room_id' => 'int64',
        'user_roles' => null,
        'user_attributes' => null,
        'gender' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_name' => 'userName',
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'is_locked' => 'isLocked',
        'has_manageable_rooms' => 'hasManageableRooms',
        'avatar_uuid' => 'avatarUuid',
        'lock_status' => 'lockStatus',
        'login' => 'login',
        'title' => 'title',
        'created_at' => 'createdAt',
        'last_login_success_at' => 'lastLoginSuccessAt',
        'expire_at' => 'expireAt',
        'is_encryption_enabled' => 'isEncryptionEnabled',
        'email' => 'email',
        'phone' => 'phone',
        'home_room_id' => 'homeRoomId',
        'user_roles' => 'userRoles',
        'user_attributes' => 'userAttributes',
        'gender' => 'gender'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_name' => 'setUserName',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'is_locked' => 'setIsLocked',
        'has_manageable_rooms' => 'setHasManageableRooms',
        'avatar_uuid' => 'setAvatarUuid',
        'lock_status' => 'setLockStatus',
        'login' => 'setLogin',
        'title' => 'setTitle',
        'created_at' => 'setCreatedAt',
        'last_login_success_at' => 'setLastLoginSuccessAt',
        'expire_at' => 'setExpireAt',
        'is_encryption_enabled' => 'setIsEncryptionEnabled',
        'email' => 'setEmail',
        'phone' => 'setPhone',
        'home_room_id' => 'setHomeRoomId',
        'user_roles' => 'setUserRoles',
        'user_attributes' => 'setUserAttributes',
        'gender' => 'setGender'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_name' => 'getUserName',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'is_locked' => 'getIsLocked',
        'has_manageable_rooms' => 'getHasManageableRooms',
        'avatar_uuid' => 'getAvatarUuid',
        'lock_status' => 'getLockStatus',
        'login' => 'getLogin',
        'title' => 'getTitle',
        'created_at' => 'getCreatedAt',
        'last_login_success_at' => 'getLastLoginSuccessAt',
        'expire_at' => 'getExpireAt',
        'is_encryption_enabled' => 'getIsEncryptionEnabled',
        'email' => 'getEmail',
        'phone' => 'getPhone',
        'home_room_id' => 'getHomeRoomId',
        'user_roles' => 'getUserRoles',
        'user_attributes' => 'getUserAttributes',
        'gender' => 'getGender'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['is_locked'] = isset($data['is_locked']) ? $data['is_locked'] : null;
        $this->container['has_manageable_rooms'] = isset($data['has_manageable_rooms']) ? $data['has_manageable_rooms'] : null;
        $this->container['avatar_uuid'] = isset($data['avatar_uuid']) ? $data['avatar_uuid'] : null;
        $this->container['lock_status'] = isset($data['lock_status']) ? $data['lock_status'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['last_login_success_at'] = isset($data['last_login_success_at']) ? $data['last_login_success_at'] : null;
        $this->container['expire_at'] = isset($data['expire_at']) ? $data['expire_at'] : null;
        $this->container['is_encryption_enabled'] = isset($data['is_encryption_enabled']) ? $data['is_encryption_enabled'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['home_room_id'] = isset($data['home_room_id']) ? $data['home_room_id'] : null;
        $this->container['user_roles'] = isset($data['user_roles']) ? $data['user_roles'] : null;
        $this->container['user_attributes'] = isset($data['user_attributes']) ? $data['user_attributes'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        if ($this->container['is_locked'] === null) {
            $invalidProperties[] = "'is_locked' can't be null";
        }
        if ($this->container['has_manageable_rooms'] === null) {
            $invalidProperties[] = "'has_manageable_rooms' can't be null";
        }
        if ($this->container['avatar_uuid'] === null) {
            $invalidProperties[] = "'avatar_uuid' can't be null";
        }
        if ($this->container['lock_status'] === null) {
            $invalidProperties[] = "'lock_status' can't be null";
        }
        if ($this->container['login'] === null) {
            $invalidProperties[] = "'login' can't be null";
        }
        if ($this->container['user_roles'] === null) {
            $invalidProperties[] = "'user_roles' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique identifier for the user
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name Username  [Since version 4.13.0]
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name User first name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name User last name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets is_locked
     *
     * @return bool
     */
    public function getIsLocked()
    {
        return $this->container['is_locked'];
    }

    /**
     * Sets is_locked
     *
     * @param bool $is_locked User is locked: * `false` - unlocked * `true` - locked  User is locked and can not login anymore. (default: `false`)
     *
     * @return $this
     */
    public function setIsLocked($is_locked)
    {
        $this->container['is_locked'] = $is_locked;

        return $this;
    }

    /**
     * Gets has_manageable_rooms
     *
     * @return bool
     */
    public function getHasManageableRooms()
    {
        return $this->container['has_manageable_rooms'];
    }

    /**
     * Sets has_manageable_rooms
     *
     * @param bool $has_manageable_rooms User has manageable rooms
     *
     * @return $this
     */
    public function setHasManageableRooms($has_manageable_rooms)
    {
        $this->container['has_manageable_rooms'] = $has_manageable_rooms;

        return $this;
    }

    /**
     * Gets avatar_uuid
     *
     * @return string
     */
    public function getAvatarUuid()
    {
        return $this->container['avatar_uuid'];
    }

    /**
     * Sets avatar_uuid
     *
     * @param string $avatar_uuid Avatar UUID  [Since version 4.11.0]
     *
     * @return $this
     */
    public function setAvatarUuid($avatar_uuid)
    {
        $this->container['avatar_uuid'] = $avatar_uuid;

        return $this;
    }

    /**
     * Gets lock_status
     *
     * @return int
     */
    public function getLockStatus()
    {
        return $this->container['lock_status'];
    }

    /**
     * Sets lock_status
     *
     * @param int $lock_status `DEPRECATED`: User lock status: * `0` - locked * `1` - Web access allowed * `2` - Web and mobile access allowed  Please use `isLocked` instead.  [Deprecated since version 4.7.0]
     *
     * @return $this
     */
    public function setLockStatus($lock_status)
    {
        $this->container['lock_status'] = $lock_status;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string $login User login name  [Deprecated since version 4.13.0]
     *
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Job title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets last_login_success_at
     *
     * @return \DateTime
     */
    public function getLastLoginSuccessAt()
    {
        return $this->container['last_login_success_at'];
    }

    /**
     * Sets last_login_success_at
     *
     * @param \DateTime $last_login_success_at Last successful logon date
     *
     * @return $this
     */
    public function setLastLoginSuccessAt($last_login_success_at)
    {
        $this->container['last_login_success_at'] = $last_login_success_at;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return \DateTime
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param \DateTime $expire_at Expiration date
     *
     * @return $this
     */
    public function setExpireAt($expire_at)
    {
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets is_encryption_enabled
     *
     * @return bool
     */
    public function getIsEncryptionEnabled()
    {
        return $this->container['is_encryption_enabled'];
    }

    /**
     * Sets is_encryption_enabled
     *
     * @param bool $is_encryption_enabled User has generated private key. Possible if client-side encryption is active for this customer
     *
     * @return $this
     */
    public function setIsEncryptionEnabled($is_encryption_enabled)
    {
        $this->container['is_encryption_enabled'] = $is_encryption_enabled;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Phone number
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets home_room_id
     *
     * @return int
     */
    public function getHomeRoomId()
    {
        return $this->container['home_room_id'];
    }

    /**
     * Sets home_room_id
     *
     * @param int $home_room_id Homeroom ID
     *
     * @return $this
     */
    public function setHomeRoomId($home_room_id)
    {
        $this->container['home_room_id'] = $home_room_id;

        return $this;
    }

    /**
     * Gets user_roles
     *
     * @return \Swagger\Client\Model\RoleList
     */
    public function getUserRoles()
    {
        return $this->container['user_roles'];
    }

    /**
     * Sets user_roles
     *
     * @param \Swagger\Client\Model\RoleList $user_roles List of user roles
     *
     * @return $this
     */
    public function setUserRoles($user_roles)
    {
        $this->container['user_roles'] = $user_roles;

        return $this;
    }

    /**
     * Gets user_attributes
     *
     * @return \Swagger\Client\Model\UserAttributes
     */
    public function getUserAttributes()
    {
        return $this->container['user_attributes'];
    }

    /**
     * Sets user_attributes
     *
     * @param \Swagger\Client\Model\UserAttributes $user_attributes User attributes
     *
     * @return $this
     */
    public function setUserAttributes($user_attributes)
    {
        $this->container['user_attributes'] = $user_attributes;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender `DEPRECATED`: Gender  [Deprecated since version 4.12.0]
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


