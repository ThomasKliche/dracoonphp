<?php
/**
 * UpdateDownloadShareRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateDownloadShareRequest Class Doc Comment
 *
 * @category Class
 * @description Request model for updating a Download Share
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateDownloadShareRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateDownloadShareRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'password' => 'string',
        'expiration' => '\Swagger\Client\Model\ObjectExpiration',
        'notes' => 'string',
        'internal_notes' => 'string',
        'show_creator_name' => 'bool',
        'show_creator_username' => 'bool',
        'notify_creator' => 'bool',
        'max_downloads' => 'int',
        'text_message_recipients' => 'string[]',
        'receiver_language' => 'string',
        'default_country' => 'string',
        'reset_password' => 'bool',
        'reset_max_downloads' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'password' => null,
        'expiration' => null,
        'notes' => null,
        'internal_notes' => null,
        'show_creator_name' => null,
        'show_creator_username' => null,
        'notify_creator' => null,
        'max_downloads' => 'int32',
        'text_message_recipients' => null,
        'receiver_language' => null,
        'default_country' => null,
        'reset_password' => null,
        'reset_max_downloads' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'password' => 'password',
        'expiration' => 'expiration',
        'notes' => 'notes',
        'internal_notes' => 'internalNotes',
        'show_creator_name' => 'showCreatorName',
        'show_creator_username' => 'showCreatorUsername',
        'notify_creator' => 'notifyCreator',
        'max_downloads' => 'maxDownloads',
        'text_message_recipients' => 'textMessageRecipients',
        'receiver_language' => 'receiverLanguage',
        'default_country' => 'defaultCountry',
        'reset_password' => 'resetPassword',
        'reset_max_downloads' => 'resetMaxDownloads'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'password' => 'setPassword',
        'expiration' => 'setExpiration',
        'notes' => 'setNotes',
        'internal_notes' => 'setInternalNotes',
        'show_creator_name' => 'setShowCreatorName',
        'show_creator_username' => 'setShowCreatorUsername',
        'notify_creator' => 'setNotifyCreator',
        'max_downloads' => 'setMaxDownloads',
        'text_message_recipients' => 'setTextMessageRecipients',
        'receiver_language' => 'setReceiverLanguage',
        'default_country' => 'setDefaultCountry',
        'reset_password' => 'setResetPassword',
        'reset_max_downloads' => 'setResetMaxDownloads'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'password' => 'getPassword',
        'expiration' => 'getExpiration',
        'notes' => 'getNotes',
        'internal_notes' => 'getInternalNotes',
        'show_creator_name' => 'getShowCreatorName',
        'show_creator_username' => 'getShowCreatorUsername',
        'notify_creator' => 'getNotifyCreator',
        'max_downloads' => 'getMaxDownloads',
        'text_message_recipients' => 'getTextMessageRecipients',
        'receiver_language' => 'getReceiverLanguage',
        'default_country' => 'getDefaultCountry',
        'reset_password' => 'getResetPassword',
        'reset_max_downloads' => 'getResetMaxDownloads'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['show_creator_name'] = isset($data['show_creator_name']) ? $data['show_creator_name'] : null;
        $this->container['show_creator_username'] = isset($data['show_creator_username']) ? $data['show_creator_username'] : null;
        $this->container['notify_creator'] = isset($data['notify_creator']) ? $data['notify_creator'] : null;
        $this->container['max_downloads'] = isset($data['max_downloads']) ? $data['max_downloads'] : null;
        $this->container['text_message_recipients'] = isset($data['text_message_recipients']) ? $data['text_message_recipients'] : null;
        $this->container['receiver_language'] = isset($data['receiver_language']) ? $data['receiver_language'] : null;
        $this->container['default_country'] = isset($data['default_country']) ? $data['default_country'] : null;
        $this->container['reset_password'] = isset($data['reset_password']) ? $data['reset_password'] : null;
        $this->container['reset_max_downloads'] = isset($data['reset_max_downloads']) ? $data['reset_max_downloads'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Alias name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Access password, not allowed for encrypted shares
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return \Swagger\Client\Model\ObjectExpiration
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param \Swagger\Client\Model\ObjectExpiration $expiration Expiration date / time
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes User notes (limited to 255 characters)
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets internal_notes
     *
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     *
     * @param string $internal_notes Internal notes (limited to 255 characters)
     *
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets show_creator_name
     *
     * @return bool
     */
    public function getShowCreatorName()
    {
        return $this->container['show_creator_name'];
    }

    /**
     * Sets show_creator_name
     *
     * @param bool $show_creator_name Show creator first and last name.
     *
     * @return $this
     */
    public function setShowCreatorName($show_creator_name)
    {
        $this->container['show_creator_name'] = $show_creator_name;

        return $this;
    }

    /**
     * Gets show_creator_username
     *
     * @return bool
     */
    public function getShowCreatorUsername()
    {
        return $this->container['show_creator_username'];
    }

    /**
     * Sets show_creator_username
     *
     * @param bool $show_creator_username Show creator email address.
     *
     * @return $this
     */
    public function setShowCreatorUsername($show_creator_username)
    {
        $this->container['show_creator_username'] = $show_creator_username;

        return $this;
    }

    /**
     * Gets notify_creator
     *
     * @return bool
     */
    public function getNotifyCreator()
    {
        return $this->container['notify_creator'];
    }

    /**
     * Sets notify_creator
     *
     * @param bool $notify_creator Notify creator on every download.
     *
     * @return $this
     */
    public function setNotifyCreator($notify_creator)
    {
        $this->container['notify_creator'] = $notify_creator;

        return $this;
    }

    /**
     * Gets max_downloads
     *
     * @return int
     */
    public function getMaxDownloads()
    {
        return $this->container['max_downloads'];
    }

    /**
     * Sets max_downloads
     *
     * @param int $max_downloads Max allowed downloads
     *
     * @return $this
     */
    public function setMaxDownloads($max_downloads)
    {
        $this->container['max_downloads'] = $max_downloads;

        return $this;
    }

    /**
     * Gets text_message_recipients
     *
     * @return string[]
     */
    public function getTextMessageRecipients()
    {
        return $this->container['text_message_recipients'];
    }

    /**
     * Sets text_message_recipients
     *
     * @param string[] $text_message_recipients List of recipient FQTNs E.123 / E.164 Format
     *
     * @return $this
     */
    public function setTextMessageRecipients($text_message_recipients)
    {
        $this->container['text_message_recipients'] = $text_message_recipients;

        return $this;
    }

    /**
     * Gets receiver_language
     *
     * @return string
     */
    public function getReceiverLanguage()
    {
        return $this->container['receiver_language'];
    }

    /**
     * Sets receiver_language
     *
     * @param string $receiver_language Language tag for messages to receiver
     *
     * @return $this
     */
    public function setReceiverLanguage($receiver_language)
    {
        $this->container['receiver_language'] = $receiver_language;

        return $this;
    }

    /**
     * Gets default_country
     *
     * @return string
     */
    public function getDefaultCountry()
    {
        return $this->container['default_country'];
    }

    /**
     * Sets default_country
     *
     * @param string $default_country Country shorthand symbol (cf. ISO 3166-2)
     *
     * @return $this
     */
    public function setDefaultCountry($default_country)
    {
        $this->container['default_country'] = $default_country;

        return $this;
    }

    /**
     * Gets reset_password
     *
     * @return bool
     */
    public function getResetPassword()
    {
        return $this->container['reset_password'];
    }

    /**
     * Sets reset_password
     *
     * @param bool $reset_password Set 'true' to reset 'password' for Download Share.
     *
     * @return $this
     */
    public function setResetPassword($reset_password)
    {
        $this->container['reset_password'] = $reset_password;

        return $this;
    }

    /**
     * Gets reset_max_downloads
     *
     * @return bool
     */
    public function getResetMaxDownloads()
    {
        return $this->container['reset_max_downloads'];
    }

    /**
     * Sets reset_max_downloads
     *
     * @param bool $reset_max_downloads Set 'true' to reset 'maxDownloads' for Download Share.
     *
     * @return $this
     */
    public function setResetMaxDownloads($reset_max_downloads)
    {
        $this->container['reset_max_downloads'] = $reset_max_downloads;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


