<?php
/**
 * CharacterRules
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CharacterRules Class Doc Comment
 *
 * @category Class
 * @description Password character rules
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CharacterRules implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CharacterRules';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'must_contain_characters' => 'string[]',
        'number_of_characteristics_to_enforce' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'must_contain_characters' => null,
        'number_of_characteristics_to_enforce' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'must_contain_characters' => 'mustContainCharacters',
        'number_of_characteristics_to_enforce' => 'numberOfCharacteristicsToEnforce'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'must_contain_characters' => 'setMustContainCharacters',
        'number_of_characteristics_to_enforce' => 'setNumberOfCharacteristicsToEnforce'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'must_contain_characters' => 'getMustContainCharacters',
        'number_of_characteristics_to_enforce' => 'getNumberOfCharacteristicsToEnforce'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MUST_CONTAIN_CHARACTERS_ALPHA = 'alpha';
    const MUST_CONTAIN_CHARACTERS_UPPERCASE = 'uppercase';
    const MUST_CONTAIN_CHARACTERS_LOWERCASE = 'lowercase';
    const MUST_CONTAIN_CHARACTERS_NUMERIC = 'numeric';
    const MUST_CONTAIN_CHARACTERS_SPECIAL = 'special';
    const MUST_CONTAIN_CHARACTERS_ALL = 'all';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMustContainCharactersAllowableValues()
    {
        return [
            self::MUST_CONTAIN_CHARACTERS_ALPHA,
            self::MUST_CONTAIN_CHARACTERS_UPPERCASE,
            self::MUST_CONTAIN_CHARACTERS_LOWERCASE,
            self::MUST_CONTAIN_CHARACTERS_NUMERIC,
            self::MUST_CONTAIN_CHARACTERS_SPECIAL,
            self::MUST_CONTAIN_CHARACTERS_ALL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['must_contain_characters'] = isset($data['must_contain_characters']) ? $data['must_contain_characters'] : null;
        $this->container['number_of_characteristics_to_enforce'] = isset($data['number_of_characteristics_to_enforce']) ? $data['number_of_characteristics_to_enforce'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['must_contain_characters'] === null) {
            $invalidProperties[] = "'must_contain_characters' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets must_contain_characters
     *
     * @return string[]
     */
    public function getMustContainCharacters()
    {
        return $this->container['must_contain_characters'];
    }

    /**
     * Sets must_contain_characters
     *
     * @param string[] $must_contain_characters Characters which a password must contain: * `alpha` - at least one alphabetical character (`uppercase` OR `lowercase`) * `uppercase` - at least one uppercase character * `lowercase` - at least one lowercase character * `numeric` - at least one numeric character * `special` - at least one special character (letters and digits excluded) * `all` - combination of `uppercase`, `lowercase`, `numeric` and `special`
     *
     * @return $this
     */
    public function setMustContainCharacters($must_contain_characters)
    {
        $allowedValues = $this->getMustContainCharactersAllowableValues();
        if (array_diff($must_contain_characters, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'must_contain_characters', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['must_contain_characters'] = $must_contain_characters;

        return $this;
    }

    /**
     * Gets number_of_characteristics_to_enforce
     *
     * @return int
     */
    public function getNumberOfCharacteristicsToEnforce()
    {
        return $this->container['number_of_characteristics_to_enforce'];
    }

    /**
     * Sets number_of_characteristics_to_enforce
     *
     * @param int $number_of_characteristics_to_enforce Number of characteristics to enforce e.g. from `[\"uppercase\", \"lowercase\", \"numeric\", \"special\"]` all 4 character sets can be enforced; but also only 2 of them (must be between 0 and 4)
     *
     * @return $this
     */
    public function setNumberOfCharacteristicsToEnforce($number_of_characteristics_to_enforce)
    {
        $this->container['number_of_characteristics_to_enforce'] = $number_of_characteristics_to_enforce;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


