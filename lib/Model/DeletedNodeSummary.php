<?php
/**
 * DeletedNodeSummary
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DeletedNodeSummary Class Doc Comment
 *
 * @category Class
 * @description Deleted node information (Deleted node can be a folder or file)
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeletedNodeSummary implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeletedNodeSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parent_id' => 'int',
        'parent_path' => 'string',
        'name' => 'string',
        'type' => 'string',
        'cnt_versions' => 'int',
        'first_deleted_at' => '\DateTime',
        'last_deleted_at' => '\DateTime',
        'last_deleted_node_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parent_id' => 'int64',
        'parent_path' => null,
        'name' => null,
        'type' => null,
        'cnt_versions' => 'int32',
        'first_deleted_at' => 'date-time',
        'last_deleted_at' => 'date-time',
        'last_deleted_node_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parent_id' => 'parentId',
        'parent_path' => 'parentPath',
        'name' => 'name',
        'type' => 'type',
        'cnt_versions' => 'cntVersions',
        'first_deleted_at' => 'firstDeletedAt',
        'last_deleted_at' => 'lastDeletedAt',
        'last_deleted_node_id' => 'lastDeletedNodeId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parent_id' => 'setParentId',
        'parent_path' => 'setParentPath',
        'name' => 'setName',
        'type' => 'setType',
        'cnt_versions' => 'setCntVersions',
        'first_deleted_at' => 'setFirstDeletedAt',
        'last_deleted_at' => 'setLastDeletedAt',
        'last_deleted_node_id' => 'setLastDeletedNodeId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parent_id' => 'getParentId',
        'parent_path' => 'getParentPath',
        'name' => 'getName',
        'type' => 'getType',
        'cnt_versions' => 'getCntVersions',
        'first_deleted_at' => 'getFirstDeletedAt',
        'last_deleted_at' => 'getLastDeletedAt',
        'last_deleted_node_id' => 'getLastDeletedNodeId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_ROOM = 'room';
    const TYPE_FOLDER = 'folder';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ROOM,
            self::TYPE_FOLDER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['parent_path'] = isset($data['parent_path']) ? $data['parent_path'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['cnt_versions'] = isset($data['cnt_versions']) ? $data['cnt_versions'] : null;
        $this->container['first_deleted_at'] = isset($data['first_deleted_at']) ? $data['first_deleted_at'] : null;
        $this->container['last_deleted_at'] = isset($data['last_deleted_at']) ? $data['last_deleted_at'] : null;
        $this->container['last_deleted_node_id'] = isset($data['last_deleted_node_id']) ? $data['last_deleted_node_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['parent_id'] === null) {
            $invalidProperties[] = "'parent_id' can't be null";
        }
        if ($this->container['parent_path'] === null) {
            $invalidProperties[] = "'parent_path' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['cnt_versions'] === null) {
            $invalidProperties[] = "'cnt_versions' can't be null";
        }
        if ($this->container['first_deleted_at'] === null) {
            $invalidProperties[] = "'first_deleted_at' can't be null";
        }
        if ($this->container['last_deleted_at'] === null) {
            $invalidProperties[] = "'last_deleted_at' can't be null";
        }
        if ($this->container['last_deleted_node_id'] === null) {
            $invalidProperties[] = "'last_deleted_node_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id Parent node ID (room or folder)
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets parent_path
     *
     * @return string
     */
    public function getParentPath()
    {
        return $this->container['parent_path'];
    }

    /**
     * Sets parent_path
     *
     * @param string $parent_path Parent node path `/` if node is a root node (room)
     *
     * @return $this
     */
    public function setParentPath($parent_path)
    {
        $this->container['parent_path'] = $parent_path;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Node name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Node type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets cnt_versions
     *
     * @return int
     */
    public function getCntVersions()
    {
        return $this->container['cnt_versions'];
    }

    /**
     * Sets cnt_versions
     *
     * @param int $cnt_versions Number of deleted versions of this file
     *
     * @return $this
     */
    public function setCntVersions($cnt_versions)
    {
        $this->container['cnt_versions'] = $cnt_versions;

        return $this;
    }

    /**
     * Gets first_deleted_at
     *
     * @return \DateTime
     */
    public function getFirstDeletedAt()
    {
        return $this->container['first_deleted_at'];
    }

    /**
     * Sets first_deleted_at
     *
     * @param \DateTime $first_deleted_at First deleted version
     *
     * @return $this
     */
    public function setFirstDeletedAt($first_deleted_at)
    {
        $this->container['first_deleted_at'] = $first_deleted_at;

        return $this;
    }

    /**
     * Gets last_deleted_at
     *
     * @return \DateTime
     */
    public function getLastDeletedAt()
    {
        return $this->container['last_deleted_at'];
    }

    /**
     * Sets last_deleted_at
     *
     * @param \DateTime $last_deleted_at Last deleted version
     *
     * @return $this
     */
    public function setLastDeletedAt($last_deleted_at)
    {
        $this->container['last_deleted_at'] = $last_deleted_at;

        return $this;
    }

    /**
     * Gets last_deleted_node_id
     *
     * @return int
     */
    public function getLastDeletedNodeId()
    {
        return $this->container['last_deleted_node_id'];
    }

    /**
     * Sets last_deleted_node_id
     *
     * @param int $last_deleted_node_id Node ID of last deleted version
     *
     * @return $this
     */
    public function setLastDeletedNodeId($last_deleted_node_id)
    {
        $this->container['last_deleted_node_id'] = $last_deleted_node_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


