<?php
/**
 * AuditNodeResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuditNodeResponse Class Doc Comment
 *
 * @category Class
 * @description Audit node report
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuditNodeResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuditNodeResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'node_id' => 'int',
        'node_name' => 'string',
        'node_parent_path' => 'string',
        'node_cnt_children' => 'int',
        'audit_user_permission_list' => '\Swagger\Client\Model\AuditUserPermission[]',
        'node_parent_id' => 'int',
        'node_size' => 'int',
        'node_recycle_bin_retention_period' => 'int',
        'node_quota' => 'int',
        'node_is_encrypted' => 'bool',
        'node_has_activities_log' => 'bool',
        'node_created_at' => '\DateTime',
        'node_created_by' => '\Swagger\Client\Model\UserInfo',
        'node_updated_at' => '\DateTime',
        'node_updated_by' => '\Swagger\Client\Model\UserInfo',
        'node_has_recycle_bin' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'node_id' => 'int64',
        'node_name' => null,
        'node_parent_path' => null,
        'node_cnt_children' => 'int32',
        'audit_user_permission_list' => null,
        'node_parent_id' => 'int64',
        'node_size' => 'int64',
        'node_recycle_bin_retention_period' => 'int32',
        'node_quota' => 'int64',
        'node_is_encrypted' => null,
        'node_has_activities_log' => null,
        'node_created_at' => 'date-time',
        'node_created_by' => null,
        'node_updated_at' => 'date-time',
        'node_updated_by' => null,
        'node_has_recycle_bin' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'node_id' => 'nodeId',
        'node_name' => 'nodeName',
        'node_parent_path' => 'nodeParentPath',
        'node_cnt_children' => 'nodeCntChildren',
        'audit_user_permission_list' => 'auditUserPermissionList',
        'node_parent_id' => 'nodeParentId',
        'node_size' => 'nodeSize',
        'node_recycle_bin_retention_period' => 'nodeRecycleBinRetentionPeriod',
        'node_quota' => 'nodeQuota',
        'node_is_encrypted' => 'nodeIsEncrypted',
        'node_has_activities_log' => 'nodeHasActivitiesLog',
        'node_created_at' => 'nodeCreatedAt',
        'node_created_by' => 'nodeCreatedBy',
        'node_updated_at' => 'nodeUpdatedAt',
        'node_updated_by' => 'nodeUpdatedBy',
        'node_has_recycle_bin' => 'nodeHasRecycleBin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'node_id' => 'setNodeId',
        'node_name' => 'setNodeName',
        'node_parent_path' => 'setNodeParentPath',
        'node_cnt_children' => 'setNodeCntChildren',
        'audit_user_permission_list' => 'setAuditUserPermissionList',
        'node_parent_id' => 'setNodeParentId',
        'node_size' => 'setNodeSize',
        'node_recycle_bin_retention_period' => 'setNodeRecycleBinRetentionPeriod',
        'node_quota' => 'setNodeQuota',
        'node_is_encrypted' => 'setNodeIsEncrypted',
        'node_has_activities_log' => 'setNodeHasActivitiesLog',
        'node_created_at' => 'setNodeCreatedAt',
        'node_created_by' => 'setNodeCreatedBy',
        'node_updated_at' => 'setNodeUpdatedAt',
        'node_updated_by' => 'setNodeUpdatedBy',
        'node_has_recycle_bin' => 'setNodeHasRecycleBin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'node_id' => 'getNodeId',
        'node_name' => 'getNodeName',
        'node_parent_path' => 'getNodeParentPath',
        'node_cnt_children' => 'getNodeCntChildren',
        'audit_user_permission_list' => 'getAuditUserPermissionList',
        'node_parent_id' => 'getNodeParentId',
        'node_size' => 'getNodeSize',
        'node_recycle_bin_retention_period' => 'getNodeRecycleBinRetentionPeriod',
        'node_quota' => 'getNodeQuota',
        'node_is_encrypted' => 'getNodeIsEncrypted',
        'node_has_activities_log' => 'getNodeHasActivitiesLog',
        'node_created_at' => 'getNodeCreatedAt',
        'node_created_by' => 'getNodeCreatedBy',
        'node_updated_at' => 'getNodeUpdatedAt',
        'node_updated_by' => 'getNodeUpdatedBy',
        'node_has_recycle_bin' => 'getNodeHasRecycleBin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['node_id'] = isset($data['node_id']) ? $data['node_id'] : null;
        $this->container['node_name'] = isset($data['node_name']) ? $data['node_name'] : null;
        $this->container['node_parent_path'] = isset($data['node_parent_path']) ? $data['node_parent_path'] : null;
        $this->container['node_cnt_children'] = isset($data['node_cnt_children']) ? $data['node_cnt_children'] : null;
        $this->container['audit_user_permission_list'] = isset($data['audit_user_permission_list']) ? $data['audit_user_permission_list'] : null;
        $this->container['node_parent_id'] = isset($data['node_parent_id']) ? $data['node_parent_id'] : null;
        $this->container['node_size'] = isset($data['node_size']) ? $data['node_size'] : null;
        $this->container['node_recycle_bin_retention_period'] = isset($data['node_recycle_bin_retention_period']) ? $data['node_recycle_bin_retention_period'] : null;
        $this->container['node_quota'] = isset($data['node_quota']) ? $data['node_quota'] : null;
        $this->container['node_is_encrypted'] = isset($data['node_is_encrypted']) ? $data['node_is_encrypted'] : null;
        $this->container['node_has_activities_log'] = isset($data['node_has_activities_log']) ? $data['node_has_activities_log'] : null;
        $this->container['node_created_at'] = isset($data['node_created_at']) ? $data['node_created_at'] : null;
        $this->container['node_created_by'] = isset($data['node_created_by']) ? $data['node_created_by'] : null;
        $this->container['node_updated_at'] = isset($data['node_updated_at']) ? $data['node_updated_at'] : null;
        $this->container['node_updated_by'] = isset($data['node_updated_by']) ? $data['node_updated_by'] : null;
        $this->container['node_has_recycle_bin'] = isset($data['node_has_recycle_bin']) ? $data['node_has_recycle_bin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['node_id'] === null) {
            $invalidProperties[] = "'node_id' can't be null";
        }
        if ($this->container['node_name'] === null) {
            $invalidProperties[] = "'node_name' can't be null";
        }
        if ($this->container['node_parent_path'] === null) {
            $invalidProperties[] = "'node_parent_path' can't be null";
        }
        if ($this->container['node_cnt_children'] === null) {
            $invalidProperties[] = "'node_cnt_children' can't be null";
        }
        if ($this->container['audit_user_permission_list'] === null) {
            $invalidProperties[] = "'audit_user_permission_list' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets node_id
     *
     * @return int
     */
    public function getNodeId()
    {
        return $this->container['node_id'];
    }

    /**
     * Sets node_id
     *
     * @param int $node_id Node ID
     *
     * @return $this
     */
    public function setNodeId($node_id)
    {
        $this->container['node_id'] = $node_id;

        return $this;
    }

    /**
     * Gets node_name
     *
     * @return string
     */
    public function getNodeName()
    {
        return $this->container['node_name'];
    }

    /**
     * Sets node_name
     *
     * @param string $node_name Node name
     *
     * @return $this
     */
    public function setNodeName($node_name)
    {
        $this->container['node_name'] = $node_name;

        return $this;
    }

    /**
     * Gets node_parent_path
     *
     * @return string
     */
    public function getNodeParentPath()
    {
        return $this->container['node_parent_path'];
    }

    /**
     * Sets node_parent_path
     *
     * @param string $node_parent_path Parent node path `/` if node is a root node (room)
     *
     * @return $this
     */
    public function setNodeParentPath($node_parent_path)
    {
        $this->container['node_parent_path'] = $node_parent_path;

        return $this;
    }

    /**
     * Gets node_cnt_children
     *
     * @return int
     */
    public function getNodeCntChildren()
    {
        return $this->container['node_cnt_children'];
    }

    /**
     * Sets node_cnt_children
     *
     * @param int $node_cnt_children Number of direct children (no recursion; for rooms / folders only)
     *
     * @return $this
     */
    public function setNodeCntChildren($node_cnt_children)
    {
        $this->container['node_cnt_children'] = $node_cnt_children;

        return $this;
    }

    /**
     * Gets audit_user_permission_list
     *
     * @return \Swagger\Client\Model\AuditUserPermission[]
     */
    public function getAuditUserPermissionList()
    {
        return $this->container['audit_user_permission_list'];
    }

    /**
     * Sets audit_user_permission_list
     *
     * @param \Swagger\Client\Model\AuditUserPermission[] $audit_user_permission_list List of assigned users with permissions
     *
     * @return $this
     */
    public function setAuditUserPermissionList($audit_user_permission_list)
    {
        $this->container['audit_user_permission_list'] = $audit_user_permission_list;

        return $this;
    }

    /**
     * Gets node_parent_id
     *
     * @return int
     */
    public function getNodeParentId()
    {
        return $this->container['node_parent_id'];
    }

    /**
     * Sets node_parent_id
     *
     * @param int $node_parent_id Parent node ID (room or folder)
     *
     * @return $this
     */
    public function setNodeParentId($node_parent_id)
    {
        $this->container['node_parent_id'] = $node_parent_id;

        return $this;
    }

    /**
     * Gets node_size
     *
     * @return int
     */
    public function getNodeSize()
    {
        return $this->container['node_size'];
    }

    /**
     * Sets node_size
     *
     * @param int $node_size Node size in byte
     *
     * @return $this
     */
    public function setNodeSize($node_size)
    {
        $this->container['node_size'] = $node_size;

        return $this;
    }

    /**
     * Gets node_recycle_bin_retention_period
     *
     * @return int
     */
    public function getNodeRecycleBinRetentionPeriod()
    {
        return $this->container['node_recycle_bin_retention_period'];
    }

    /**
     * Sets node_recycle_bin_retention_period
     *
     * @param int $node_recycle_bin_retention_period Retention period for deleted nodes in days (Integer between 0 and 9999)
     *
     * @return $this
     */
    public function setNodeRecycleBinRetentionPeriod($node_recycle_bin_retention_period)
    {
        $this->container['node_recycle_bin_retention_period'] = $node_recycle_bin_retention_period;

        return $this;
    }

    /**
     * Gets node_quota
     *
     * @return int
     */
    public function getNodeQuota()
    {
        return $this->container['node_quota'];
    }

    /**
     * Sets node_quota
     *
     * @param int $node_quota Quota in byte
     *
     * @return $this
     */
    public function setNodeQuota($node_quota)
    {
        $this->container['node_quota'] = $node_quota;

        return $this;
    }

    /**
     * Gets node_is_encrypted
     *
     * @return bool
     */
    public function getNodeIsEncrypted()
    {
        return $this->container['node_is_encrypted'];
    }

    /**
     * Sets node_is_encrypted
     *
     * @param bool $node_is_encrypted Encryption state
     *
     * @return $this
     */
    public function setNodeIsEncrypted($node_is_encrypted)
    {
        $this->container['node_is_encrypted'] = $node_is_encrypted;

        return $this;
    }

    /**
     * Gets node_has_activities_log
     *
     * @return bool
     */
    public function getNodeHasActivitiesLog()
    {
        return $this->container['node_has_activities_log'];
    }

    /**
     * Sets node_has_activities_log
     *
     * @param bool $node_has_activities_log Is activities log active (for rooms only) (default: `true`)
     *
     * @return $this
     */
    public function setNodeHasActivitiesLog($node_has_activities_log)
    {
        $this->container['node_has_activities_log'] = $node_has_activities_log;

        return $this;
    }

    /**
     * Gets node_created_at
     *
     * @return \DateTime
     */
    public function getNodeCreatedAt()
    {
        return $this->container['node_created_at'];
    }

    /**
     * Sets node_created_at
     *
     * @param \DateTime $node_created_at Creation date
     *
     * @return $this
     */
    public function setNodeCreatedAt($node_created_at)
    {
        $this->container['node_created_at'] = $node_created_at;

        return $this;
    }

    /**
     * Gets node_created_by
     *
     * @return \Swagger\Client\Model\UserInfo
     */
    public function getNodeCreatedBy()
    {
        return $this->container['node_created_by'];
    }

    /**
     * Sets node_created_by
     *
     * @param \Swagger\Client\Model\UserInfo $node_created_by Created by user
     *
     * @return $this
     */
    public function setNodeCreatedBy($node_created_by)
    {
        $this->container['node_created_by'] = $node_created_by;

        return $this;
    }

    /**
     * Gets node_updated_at
     *
     * @return \DateTime
     */
    public function getNodeUpdatedAt()
    {
        return $this->container['node_updated_at'];
    }

    /**
     * Sets node_updated_at
     *
     * @param \DateTime $node_updated_at Modification date
     *
     * @return $this
     */
    public function setNodeUpdatedAt($node_updated_at)
    {
        $this->container['node_updated_at'] = $node_updated_at;

        return $this;
    }

    /**
     * Gets node_updated_by
     *
     * @return \Swagger\Client\Model\UserInfo
     */
    public function getNodeUpdatedBy()
    {
        return $this->container['node_updated_by'];
    }

    /**
     * Sets node_updated_by
     *
     * @param \Swagger\Client\Model\UserInfo $node_updated_by Modified by user
     *
     * @return $this
     */
    public function setNodeUpdatedBy($node_updated_by)
    {
        $this->container['node_updated_by'] = $node_updated_by;

        return $this;
    }

    /**
     * Gets node_has_recycle_bin
     *
     * @return bool
     */
    public function getNodeHasRecycleBin()
    {
        return $this->container['node_has_recycle_bin'];
    }

    /**
     * Sets node_has_recycle_bin
     *
     * @param bool $node_has_recycle_bin `DEPRECATED`: Is recycle bin active (for rooms only) Recycle bin is always on (disabling is not possible).  [Deprecated since version 4.10.0]
     *
     * @return $this
     */
    public function setNodeHasRecycleBin($node_has_recycle_bin)
    {
        $this->container['node_has_recycle_bin'] = $node_has_recycle_bin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


