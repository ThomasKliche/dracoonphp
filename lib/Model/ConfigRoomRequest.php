<?php
/**
 * ConfigRoomRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ConfigRoomRequest Class Doc Comment
 *
 * @category Class
 * @description Request model for configuring a room
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ConfigRoomRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ConfigRoomRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'recycle_bin_retention_period' => 'int',
        'inherit_permissions' => 'bool',
        'take_over_permissions' => 'bool',
        'admin_ids' => 'int[]',
        'admin_group_ids' => 'int[]',
        'new_group_member_acceptance' => 'string',
        'has_activities_log' => 'bool',
        'classification' => 'int',
        'has_recycle_bin' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'recycle_bin_retention_period' => 'int32',
        'inherit_permissions' => null,
        'take_over_permissions' => null,
        'admin_ids' => 'int64',
        'admin_group_ids' => 'int64',
        'new_group_member_acceptance' => null,
        'has_activities_log' => null,
        'classification' => 'int32',
        'has_recycle_bin' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'recycle_bin_retention_period' => 'recycleBinRetentionPeriod',
        'inherit_permissions' => 'inheritPermissions',
        'take_over_permissions' => 'takeOverPermissions',
        'admin_ids' => 'adminIds',
        'admin_group_ids' => 'adminGroupIds',
        'new_group_member_acceptance' => 'newGroupMemberAcceptance',
        'has_activities_log' => 'hasActivitiesLog',
        'classification' => 'classification',
        'has_recycle_bin' => 'hasRecycleBin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'recycle_bin_retention_period' => 'setRecycleBinRetentionPeriod',
        'inherit_permissions' => 'setInheritPermissions',
        'take_over_permissions' => 'setTakeOverPermissions',
        'admin_ids' => 'setAdminIds',
        'admin_group_ids' => 'setAdminGroupIds',
        'new_group_member_acceptance' => 'setNewGroupMemberAcceptance',
        'has_activities_log' => 'setHasActivitiesLog',
        'classification' => 'setClassification',
        'has_recycle_bin' => 'setHasRecycleBin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'recycle_bin_retention_period' => 'getRecycleBinRetentionPeriod',
        'inherit_permissions' => 'getInheritPermissions',
        'take_over_permissions' => 'getTakeOverPermissions',
        'admin_ids' => 'getAdminIds',
        'admin_group_ids' => 'getAdminGroupIds',
        'new_group_member_acceptance' => 'getNewGroupMemberAcceptance',
        'has_activities_log' => 'getHasActivitiesLog',
        'classification' => 'getClassification',
        'has_recycle_bin' => 'getHasRecycleBin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const NEW_GROUP_MEMBER_ACCEPTANCE_AUTOALLOW = 'autoallow';
    const NEW_GROUP_MEMBER_ACCEPTANCE_PENDING = 'pending';
    const CLASSIFICATION_1 = 1;
    const CLASSIFICATION_2 = 2;
    const CLASSIFICATION_3 = 3;
    const CLASSIFICATION_4 = 4;
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getNewGroupMemberAcceptanceAllowableValues()
    {
        return [
            self::NEW_GROUP_MEMBER_ACCEPTANCE_AUTOALLOW,
            self::NEW_GROUP_MEMBER_ACCEPTANCE_PENDING,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getClassificationAllowableValues()
    {
        return [
            self::CLASSIFICATION_1,
            self::CLASSIFICATION_2,
            self::CLASSIFICATION_3,
            self::CLASSIFICATION_4,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['recycle_bin_retention_period'] = isset($data['recycle_bin_retention_period']) ? $data['recycle_bin_retention_period'] : null;
        $this->container['inherit_permissions'] = isset($data['inherit_permissions']) ? $data['inherit_permissions'] : null;
        $this->container['take_over_permissions'] = isset($data['take_over_permissions']) ? $data['take_over_permissions'] : null;
        $this->container['admin_ids'] = isset($data['admin_ids']) ? $data['admin_ids'] : null;
        $this->container['admin_group_ids'] = isset($data['admin_group_ids']) ? $data['admin_group_ids'] : null;
        $this->container['new_group_member_acceptance'] = isset($data['new_group_member_acceptance']) ? $data['new_group_member_acceptance'] : null;
        $this->container['has_activities_log'] = isset($data['has_activities_log']) ? $data['has_activities_log'] : null;
        $this->container['classification'] = isset($data['classification']) ? $data['classification'] : null;
        $this->container['has_recycle_bin'] = isset($data['has_recycle_bin']) ? $data['has_recycle_bin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getNewGroupMemberAcceptanceAllowableValues();
        if (!is_null($this->container['new_group_member_acceptance']) && !in_array($this->container['new_group_member_acceptance'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'new_group_member_acceptance', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getClassificationAllowableValues();
        if (!is_null($this->container['classification']) && !in_array($this->container['classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'classification', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets recycle_bin_retention_period
     *
     * @return int
     */
    public function getRecycleBinRetentionPeriod()
    {
        return $this->container['recycle_bin_retention_period'];
    }

    /**
     * Sets recycle_bin_retention_period
     *
     * @param int $recycle_bin_retention_period Retention period for deleted nodes in days (Integer between 0 and 9999)
     *
     * @return $this
     */
    public function setRecycleBinRetentionPeriod($recycle_bin_retention_period)
    {
        $this->container['recycle_bin_retention_period'] = $recycle_bin_retention_period;

        return $this;
    }

    /**
     * Gets inherit_permissions
     *
     * @return bool
     */
    public function getInheritPermissions()
    {
        return $this->container['inherit_permissions'];
    }

    /**
     * Sets inherit_permissions
     *
     * @param bool $inherit_permissions Inherit permissions from parent room (default: `false` if `parentId` is `0`; otherwise: `true`)
     *
     * @return $this
     */
    public function setInheritPermissions($inherit_permissions)
    {
        $this->container['inherit_permissions'] = $inherit_permissions;

        return $this;
    }

    /**
     * Gets take_over_permissions
     *
     * @return bool
     */
    public function getTakeOverPermissions()
    {
        return $this->container['take_over_permissions'];
    }

    /**
     * Sets take_over_permissions
     *
     * @param bool $take_over_permissions Take over existing permissions
     *
     * @return $this
     */
    public function setTakeOverPermissions($take_over_permissions)
    {
        $this->container['take_over_permissions'] = $take_over_permissions;

        return $this;
    }

    /**
     * Gets admin_ids
     *
     * @return int[]
     */
    public function getAdminIds()
    {
        return $this->container['admin_ids'];
    }

    /**
     * Sets admin_ids
     *
     * @param int[] $admin_ids List of user ids A room requires at least one admin (user or group)
     *
     * @return $this
     */
    public function setAdminIds($admin_ids)
    {
        $this->container['admin_ids'] = $admin_ids;

        return $this;
    }

    /**
     * Gets admin_group_ids
     *
     * @return int[]
     */
    public function getAdminGroupIds()
    {
        return $this->container['admin_group_ids'];
    }

    /**
     * Sets admin_group_ids
     *
     * @param int[] $admin_group_ids List of group ids A room requires at least one admin (user or group)
     *
     * @return $this
     */
    public function setAdminGroupIds($admin_group_ids)
    {
        $this->container['admin_group_ids'] = $admin_group_ids;

        return $this;
    }

    /**
     * Gets new_group_member_acceptance
     *
     * @return string
     */
    public function getNewGroupMemberAcceptance()
    {
        return $this->container['new_group_member_acceptance'];
    }

    /**
     * Sets new_group_member_acceptance
     *
     * @param string $new_group_member_acceptance Behaviour when new users are added to the group: * `autoallow` * `pending`  Only relevant if `adminGroupIds` has items. (default: `autoallow`)
     *
     * @return $this
     */
    public function setNewGroupMemberAcceptance($new_group_member_acceptance)
    {
        $allowedValues = $this->getNewGroupMemberAcceptanceAllowableValues();
        if (!is_null($new_group_member_acceptance) && !in_array($new_group_member_acceptance, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'new_group_member_acceptance', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['new_group_member_acceptance'] = $new_group_member_acceptance;

        return $this;
    }

    /**
     * Gets has_activities_log
     *
     * @return bool
     */
    public function getHasActivitiesLog()
    {
        return $this->container['has_activities_log'];
    }

    /**
     * Sets has_activities_log
     *
     * @param bool $has_activities_log Is activities log active (for rooms only) (default: `true`)
     *
     * @return $this
     */
    public function setHasActivitiesLog($has_activities_log)
    {
        $this->container['has_activities_log'] = $has_activities_log;

        return $this;
    }

    /**
     * Gets classification
     *
     * @return int
     */
    public function getClassification()
    {
        return $this->container['classification'];
    }

    /**
     * Sets classification
     *
     * @param int $classification Classification ID: * `1` - public * `2` - internal * `3` - confidential * `4` - strictly confidential  Provided (or default) classification is taken from room when file gets uploaded without any classification. (default: `2` - internal)
     *
     * @return $this
     */
    public function setClassification($classification)
    {
        $allowedValues = $this->getClassificationAllowableValues();
        if (!is_null($classification) && !in_array($classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'classification', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['classification'] = $classification;

        return $this;
    }

    /**
     * Gets has_recycle_bin
     *
     * @return bool
     */
    public function getHasRecycleBin()
    {
        return $this->container['has_recycle_bin'];
    }

    /**
     * Sets has_recycle_bin
     *
     * @param bool $has_recycle_bin `DEPRECATED`: Is recycle bin active (for rooms only) Recycle bin is always on (disabling is not possible).
     *
     * @return $this
     */
    public function setHasRecycleBin($has_recycle_bin)
    {
        $this->container['has_recycle_bin'] = $has_recycle_bin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


