<?php
/**
 * PublicDownloadShare
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PublicDownloadShare Class Doc Comment
 *
 * @category Class
 * @description Download Share information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublicDownloadShare implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PublicDownloadShare';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'is_protected' => 'bool',
        'file_name' => 'string',
        'size' => 'int',
        'limit_reached' => 'bool',
        'creator_name' => 'string',
        'created_at' => '\DateTime',
        'has_download_limit' => 'bool',
        'media_type' => 'string',
        'name' => 'string',
        'creator_username' => 'string',
        'expire_at' => '\DateTime',
        'notes' => 'string',
        'is_encrypted' => 'bool',
        'file_key' => '\Swagger\Client\Model\FileKey',
        'private_key_container' => '\Swagger\Client\Model\PrivateKeyContainer'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'is_protected' => null,
        'file_name' => null,
        'size' => 'int64',
        'limit_reached' => null,
        'creator_name' => null,
        'created_at' => 'date-time',
        'has_download_limit' => null,
        'media_type' => null,
        'name' => null,
        'creator_username' => null,
        'expire_at' => 'date-time',
        'notes' => null,
        'is_encrypted' => null,
        'file_key' => null,
        'private_key_container' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'is_protected' => 'isProtected',
        'file_name' => 'fileName',
        'size' => 'size',
        'limit_reached' => 'limitReached',
        'creator_name' => 'creatorName',
        'created_at' => 'createdAt',
        'has_download_limit' => 'hasDownloadLimit',
        'media_type' => 'mediaType',
        'name' => 'name',
        'creator_username' => 'creatorUsername',
        'expire_at' => 'expireAt',
        'notes' => 'notes',
        'is_encrypted' => 'isEncrypted',
        'file_key' => 'fileKey',
        'private_key_container' => 'privateKeyContainer'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'is_protected' => 'setIsProtected',
        'file_name' => 'setFileName',
        'size' => 'setSize',
        'limit_reached' => 'setLimitReached',
        'creator_name' => 'setCreatorName',
        'created_at' => 'setCreatedAt',
        'has_download_limit' => 'setHasDownloadLimit',
        'media_type' => 'setMediaType',
        'name' => 'setName',
        'creator_username' => 'setCreatorUsername',
        'expire_at' => 'setExpireAt',
        'notes' => 'setNotes',
        'is_encrypted' => 'setIsEncrypted',
        'file_key' => 'setFileKey',
        'private_key_container' => 'setPrivateKeyContainer'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'is_protected' => 'getIsProtected',
        'file_name' => 'getFileName',
        'size' => 'getSize',
        'limit_reached' => 'getLimitReached',
        'creator_name' => 'getCreatorName',
        'created_at' => 'getCreatedAt',
        'has_download_limit' => 'getHasDownloadLimit',
        'media_type' => 'getMediaType',
        'name' => 'getName',
        'creator_username' => 'getCreatorUsername',
        'expire_at' => 'getExpireAt',
        'notes' => 'getNotes',
        'is_encrypted' => 'getIsEncrypted',
        'file_key' => 'getFileKey',
        'private_key_container' => 'getPrivateKeyContainer'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['is_protected'] = isset($data['is_protected']) ? $data['is_protected'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['limit_reached'] = isset($data['limit_reached']) ? $data['limit_reached'] : null;
        $this->container['creator_name'] = isset($data['creator_name']) ? $data['creator_name'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['has_download_limit'] = isset($data['has_download_limit']) ? $data['has_download_limit'] : null;
        $this->container['media_type'] = isset($data['media_type']) ? $data['media_type'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['creator_username'] = isset($data['creator_username']) ? $data['creator_username'] : null;
        $this->container['expire_at'] = isset($data['expire_at']) ? $data['expire_at'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['is_encrypted'] = isset($data['is_encrypted']) ? $data['is_encrypted'] : null;
        $this->container['file_key'] = isset($data['file_key']) ? $data['file_key'] : null;
        $this->container['private_key_container'] = isset($data['private_key_container']) ? $data['private_key_container'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['is_protected'] === null) {
            $invalidProperties[] = "'is_protected' can't be null";
        }
        if ($this->container['file_name'] === null) {
            $invalidProperties[] = "'file_name' can't be null";
        }
        if ($this->container['size'] === null) {
            $invalidProperties[] = "'size' can't be null";
        }
        if ($this->container['limit_reached'] === null) {
            $invalidProperties[] = "'limit_reached' can't be null";
        }
        if ($this->container['creator_name'] === null) {
            $invalidProperties[] = "'creator_name' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['has_download_limit'] === null) {
            $invalidProperties[] = "'has_download_limit' can't be null";
        }
        if ($this->container['media_type'] === null) {
            $invalidProperties[] = "'media_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets is_protected
     *
     * @return bool
     */
    public function getIsProtected()
    {
        return $this->container['is_protected'];
    }

    /**
     * Sets is_protected
     *
     * @param bool $is_protected Is share protected by password
     *
     * @return $this
     */
    public function setIsProtected($is_protected)
    {
        $this->container['is_protected'] = $is_protected;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string $file_name File name
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size File size or container size not compressed (in bytes)
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets limit_reached
     *
     * @return bool
     */
    public function getLimitReached()
    {
        return $this->container['limit_reached'];
    }

    /**
     * Sets limit_reached
     *
     * @param bool $limit_reached Downloads limit reached
     *
     * @return $this
     */
    public function setLimitReached($limit_reached)
    {
        $this->container['limit_reached'] = $limit_reached;

        return $this;
    }

    /**
     * Gets creator_name
     *
     * @return string
     */
    public function getCreatorName()
    {
        return $this->container['creator_name'];
    }

    /**
     * Sets creator_name
     *
     * @param string $creator_name Creator name
     *
     * @return $this
     */
    public function setCreatorName($creator_name)
    {
        $this->container['creator_name'] = $creator_name;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets has_download_limit
     *
     * @return bool
     */
    public function getHasDownloadLimit()
    {
        return $this->container['has_download_limit'];
    }

    /**
     * Sets has_download_limit
     *
     * @param bool $has_download_limit Determines whether Download Share has a limit for amount of downloads  [Since version 4.11.0]
     *
     * @return $this
     */
    public function setHasDownloadLimit($has_download_limit)
    {
        $this->container['has_download_limit'] = $has_download_limit;

        return $this;
    }

    /**
     * Gets media_type
     *
     * @return string
     */
    public function getMediaType()
    {
        return $this->container['media_type'];
    }

    /**
     * Sets media_type
     *
     * @param string $media_type * `application/zip` (for folders and rooms) * actual file media type (for files only)  [Since version 4.11.0]
     *
     * @return $this
     */
    public function setMediaType($media_type)
    {
        $this->container['media_type'] = $media_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Share display name (alias name)
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets creator_username
     *
     * @return string
     */
    public function getCreatorUsername()
    {
        return $this->container['creator_username'];
    }

    /**
     * Sets creator_username
     *
     * @param string $creator_username Creator username
     *
     * @return $this
     */
    public function setCreatorUsername($creator_username)
    {
        $this->container['creator_username'] = $creator_username;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return \DateTime
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param \DateTime $expire_at Expiration date
     *
     * @return $this
     */
    public function setExpireAt($expire_at)
    {
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes User notes (limited to 255 characters)
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets is_encrypted
     *
     * @return bool
     */
    public function getIsEncrypted()
    {
        return $this->container['is_encrypted'];
    }

    /**
     * Sets is_encrypted
     *
     * @param bool $is_encrypted Encryption state
     *
     * @return $this
     */
    public function setIsEncrypted($is_encrypted)
    {
        $this->container['is_encrypted'] = $is_encrypted;

        return $this;
    }

    /**
     * Gets file_key
     *
     * @return \Swagger\Client\Model\FileKey
     */
    public function getFileKey()
    {
        return $this->container['file_key'];
    }

    /**
     * Sets file_key
     *
     * @param \Swagger\Client\Model\FileKey $file_key Encrypted file key for shares out of encrypted rooms
     *
     * @return $this
     */
    public function setFileKey($file_key)
    {
        $this->container['file_key'] = $file_key;

        return $this;
    }

    /**
     * Gets private_key_container
     *
     * @return \Swagger\Client\Model\PrivateKeyContainer
     */
    public function getPrivateKeyContainer()
    {
        return $this->container['private_key_container'];
    }

    /**
     * Sets private_key_container
     *
     * @param \Swagger\Client\Model\PrivateKeyContainer $private_key_container Private key container (private key and version)
     *
     * @return $this
     */
    public function setPrivateKeyContainer($private_key_container)
    {
        $this->container['private_key_container'] = $private_key_container;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


