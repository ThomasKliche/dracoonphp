<?php
/**
 * RoomData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RoomData Class Doc Comment
 *
 * @category Class
 * @description Room information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RoomData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RoomData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'type' => 'string',
        'id' => 'int',
        'is_granted' => 'bool',
        'name' => 'string',
        'is_encrypted' => 'bool',
        'recycle_bin_retention_period' => 'int',
        'has_recycle_bin' => 'bool',
        'parent_id' => 'int',
        'size' => 'int',
        'permissions' => '\Swagger\Client\Model\NodePermissions',
        'created_at' => '\DateTime',
        'created_by' => '\Swagger\Client\Model\UserInfo',
        'updated_at' => '\DateTime',
        'updated_by' => '\Swagger\Client\Model\UserInfo',
        'quota' => 'int',
        'cnt_download_shares' => 'int',
        'cnt_upload_shares' => 'int',
        'is_favorite' => 'bool',
        'children' => '\Swagger\Client\Model\RoomData[]',
        'cnt_admins' => 'int',
        'cnt_users' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'type' => null,
        'id' => 'int64',
        'is_granted' => null,
        'name' => null,
        'is_encrypted' => null,
        'recycle_bin_retention_period' => 'int32',
        'has_recycle_bin' => null,
        'parent_id' => 'int64',
        'size' => 'int64',
        'permissions' => null,
        'created_at' => 'date-time',
        'created_by' => null,
        'updated_at' => 'date-time',
        'updated_by' => null,
        'quota' => 'int64',
        'cnt_download_shares' => 'int32',
        'cnt_upload_shares' => 'int32',
        'is_favorite' => null,
        'children' => null,
        'cnt_admins' => 'int32',
        'cnt_users' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'type' => 'type',
        'id' => 'id',
        'is_granted' => 'isGranted',
        'name' => 'name',
        'is_encrypted' => 'isEncrypted',
        'recycle_bin_retention_period' => 'recycleBinRetentionPeriod',
        'has_recycle_bin' => 'hasRecycleBin',
        'parent_id' => 'parentId',
        'size' => 'size',
        'permissions' => 'permissions',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy',
        'quota' => 'quota',
        'cnt_download_shares' => 'cntDownloadShares',
        'cnt_upload_shares' => 'cntUploadShares',
        'is_favorite' => 'isFavorite',
        'children' => 'children',
        'cnt_admins' => 'cntAdmins',
        'cnt_users' => 'cntUsers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'type' => 'setType',
        'id' => 'setId',
        'is_granted' => 'setIsGranted',
        'name' => 'setName',
        'is_encrypted' => 'setIsEncrypted',
        'recycle_bin_retention_period' => 'setRecycleBinRetentionPeriod',
        'has_recycle_bin' => 'setHasRecycleBin',
        'parent_id' => 'setParentId',
        'size' => 'setSize',
        'permissions' => 'setPermissions',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy',
        'quota' => 'setQuota',
        'cnt_download_shares' => 'setCntDownloadShares',
        'cnt_upload_shares' => 'setCntUploadShares',
        'is_favorite' => 'setIsFavorite',
        'children' => 'setChildren',
        'cnt_admins' => 'setCntAdmins',
        'cnt_users' => 'setCntUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'type' => 'getType',
        'id' => 'getId',
        'is_granted' => 'getIsGranted',
        'name' => 'getName',
        'is_encrypted' => 'getIsEncrypted',
        'recycle_bin_retention_period' => 'getRecycleBinRetentionPeriod',
        'has_recycle_bin' => 'getHasRecycleBin',
        'parent_id' => 'getParentId',
        'size' => 'getSize',
        'permissions' => 'getPermissions',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy',
        'quota' => 'getQuota',
        'cnt_download_shares' => 'getCntDownloadShares',
        'cnt_upload_shares' => 'getCntUploadShares',
        'is_favorite' => 'getIsFavorite',
        'children' => 'getChildren',
        'cnt_admins' => 'getCntAdmins',
        'cnt_users' => 'getCntUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TYPE_ROOM = 'room';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_ROOM,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_granted'] = isset($data['is_granted']) ? $data['is_granted'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['is_encrypted'] = isset($data['is_encrypted']) ? $data['is_encrypted'] : null;
        $this->container['recycle_bin_retention_period'] = isset($data['recycle_bin_retention_period']) ? $data['recycle_bin_retention_period'] : null;
        $this->container['has_recycle_bin'] = isset($data['has_recycle_bin']) ? $data['has_recycle_bin'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['quota'] = isset($data['quota']) ? $data['quota'] : null;
        $this->container['cnt_download_shares'] = isset($data['cnt_download_shares']) ? $data['cnt_download_shares'] : null;
        $this->container['cnt_upload_shares'] = isset($data['cnt_upload_shares']) ? $data['cnt_upload_shares'] : null;
        $this->container['is_favorite'] = isset($data['is_favorite']) ? $data['is_favorite'] : null;
        $this->container['children'] = isset($data['children']) ? $data['children'] : null;
        $this->container['cnt_admins'] = isset($data['cnt_admins']) ? $data['cnt_admins'] : null;
        $this->container['cnt_users'] = isset($data['cnt_users']) ? $data['cnt_users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['is_granted'] === null) {
            $invalidProperties[] = "'is_granted' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['is_encrypted'] === null) {
            $invalidProperties[] = "'is_encrypted' can't be null";
        }
        if ($this->container['recycle_bin_retention_period'] === null) {
            $invalidProperties[] = "'recycle_bin_retention_period' can't be null";
        }
        if ($this->container['has_recycle_bin'] === null) {
            $invalidProperties[] = "'has_recycle_bin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Node type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Room ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_granted
     *
     * @return bool
     */
    public function getIsGranted()
    {
        return $this->container['is_granted'];
    }

    /**
     * Sets is_granted
     *
     * @param bool $is_granted Is user granted room permissions
     *
     * @return $this
     */
    public function setIsGranted($is_granted)
    {
        $this->container['is_granted'] = $is_granted;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets is_encrypted
     *
     * @return bool
     */
    public function getIsEncrypted()
    {
        return $this->container['is_encrypted'];
    }

    /**
     * Sets is_encrypted
     *
     * @param bool $is_encrypted Encryption state
     *
     * @return $this
     */
    public function setIsEncrypted($is_encrypted)
    {
        $this->container['is_encrypted'] = $is_encrypted;

        return $this;
    }

    /**
     * Gets recycle_bin_retention_period
     *
     * @return int
     */
    public function getRecycleBinRetentionPeriod()
    {
        return $this->container['recycle_bin_retention_period'];
    }

    /**
     * Sets recycle_bin_retention_period
     *
     * @param int $recycle_bin_retention_period Retention period for deleted nodes in days (Integer between 0 and 9999)
     *
     * @return $this
     */
    public function setRecycleBinRetentionPeriod($recycle_bin_retention_period)
    {
        $this->container['recycle_bin_retention_period'] = $recycle_bin_retention_period;

        return $this;
    }

    /**
     * Gets has_recycle_bin
     *
     * @return bool
     */
    public function getHasRecycleBin()
    {
        return $this->container['has_recycle_bin'];
    }

    /**
     * Sets has_recycle_bin
     *
     * @param bool $has_recycle_bin `DEPRECATED`: Is recycle bin active (for rooms only) Recycle bin is always on (disabling is not possible).  [Deprecated since version 4.10.0]
     *
     * @return $this
     */
    public function setHasRecycleBin($has_recycle_bin)
    {
        $this->container['has_recycle_bin'] = $has_recycle_bin;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return int
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param int $parent_id Parent node ID (room or folder)
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Room size
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \Swagger\Client\Model\NodePermissions
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \Swagger\Client\Model\NodePermissions $permissions Available permissions for this node
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Expiration date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\UserInfo
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\UserInfo $created_by Created by user
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Modification date
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\UserInfo
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\UserInfo $updated_by Modified by user
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return int
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param int $quota Quota in byte
     *
     * @return $this
     */
    public function setQuota($quota)
    {
        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets cnt_download_shares
     *
     * @return int
     */
    public function getCntDownloadShares()
    {
        return $this->container['cnt_download_shares'];
    }

    /**
     * Sets cnt_download_shares
     *
     * @param int $cnt_download_shares Returns the number of Download Shares of this node.
     *
     * @return $this
     */
    public function setCntDownloadShares($cnt_download_shares)
    {
        $this->container['cnt_download_shares'] = $cnt_download_shares;

        return $this;
    }

    /**
     * Gets cnt_upload_shares
     *
     * @return int
     */
    public function getCntUploadShares()
    {
        return $this->container['cnt_upload_shares'];
    }

    /**
     * Sets cnt_upload_shares
     *
     * @param int $cnt_upload_shares Returns the number of Upload Shares of this node.
     *
     * @return $this
     */
    public function setCntUploadShares($cnt_upload_shares)
    {
        $this->container['cnt_upload_shares'] = $cnt_upload_shares;

        return $this;
    }

    /**
     * Gets is_favorite
     *
     * @return bool
     */
    public function getIsFavorite()
    {
        return $this->container['is_favorite'];
    }

    /**
     * Sets is_favorite
     *
     * @param bool $is_favorite Node is marked as favorite (for rooms / folders only)
     *
     * @return $this
     */
    public function setIsFavorite($is_favorite)
    {
        $this->container['is_favorite'] = $is_favorite;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \Swagger\Client\Model\RoomData[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \Swagger\Client\Model\RoomData[] $children `DEPRECATED`: List of rooms, where this room is a parent (if exist)  [Deprecated since version 4.10.0]
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets cnt_admins
     *
     * @return int
     */
    public function getCntAdmins()
    {
        return $this->container['cnt_admins'];
    }

    /**
     * Sets cnt_admins
     *
     * @param int $cnt_admins `DEPRECATED`: Number of admins (for rooms only)  [Deprecated since version 4.2.0]
     *
     * @return $this
     */
    public function setCntAdmins($cnt_admins)
    {
        $this->container['cnt_admins'] = $cnt_admins;

        return $this;
    }

    /**
     * Gets cnt_users
     *
     * @return int
     */
    public function getCntUsers()
    {
        return $this->container['cnt_users'];
    }

    /**
     * Sets cnt_users
     *
     * @param int $cnt_users `DEPRECATED`: Number of users (for rooms only)  [Deprecated since version 4.2.0]
     *
     * @return $this
     */
    public function setCntUsers($cnt_users)
    {
        $this->container['cnt_users'] = $cnt_users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


