<?php
/**
 * MoveNodesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MoveNodesRequest Class Doc Comment
 *
 * @category Class
 * @description Request model for moving nodes
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MoveNodesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MoveNodesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'items' => '\Swagger\Client\Model\MoveNode[]',
        'resolution_strategy' => 'string',
        'keep_share_links' => 'bool',
        'node_ids' => 'int[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'items' => null,
        'resolution_strategy' => null,
        'keep_share_links' => null,
        'node_ids' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'items' => 'items',
        'resolution_strategy' => 'resolutionStrategy',
        'keep_share_links' => 'keepShareLinks',
        'node_ids' => 'nodeIds'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'items' => 'setItems',
        'resolution_strategy' => 'setResolutionStrategy',
        'keep_share_links' => 'setKeepShareLinks',
        'node_ids' => 'setNodeIds'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'items' => 'getItems',
        'resolution_strategy' => 'getResolutionStrategy',
        'keep_share_links' => 'getKeepShareLinks',
        'node_ids' => 'getNodeIds'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const RESOLUTION_STRATEGY_AUTORENAME = 'autorename';
    const RESOLUTION_STRATEGY_OVERWRITE = 'overwrite';
    const RESOLUTION_STRATEGY_FAIL = 'fail';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getResolutionStrategyAllowableValues()
    {
        return [
            self::RESOLUTION_STRATEGY_AUTORENAME,
            self::RESOLUTION_STRATEGY_OVERWRITE,
            self::RESOLUTION_STRATEGY_FAIL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['items'] = isset($data['items']) ? $data['items'] : null;
        $this->container['resolution_strategy'] = isset($data['resolution_strategy']) ? $data['resolution_strategy'] : null;
        $this->container['keep_share_links'] = isset($data['keep_share_links']) ? $data['keep_share_links'] : null;
        $this->container['node_ids'] = isset($data['node_ids']) ? $data['node_ids'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getResolutionStrategyAllowableValues();
        if (!is_null($this->container['resolution_strategy']) && !in_array($this->container['resolution_strategy'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'resolution_strategy', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets items
     *
     * @return \Swagger\Client\Model\MoveNode[]
     */
    public function getItems()
    {
        return $this->container['items'];
    }

    /**
     * Sets items
     *
     * @param \Swagger\Client\Model\MoveNode[] $items List of nodes to be moved
     *
     * @return $this
     */
    public function setItems($items)
    {
        $this->container['items'] = $items;

        return $this;
    }

    /**
     * Gets resolution_strategy
     *
     * @return string
     */
    public function getResolutionStrategy()
    {
        return $this->container['resolution_strategy'];
    }

    /**
     * Sets resolution_strategy
     *
     * @param string $resolution_strategy Node conflict resolution strategy: * `autorename` * `overwrite` * `fail`  (default: `autorename`)
     *
     * @return $this
     */
    public function setResolutionStrategy($resolution_strategy)
    {
        $allowedValues = $this->getResolutionStrategyAllowableValues();
        if (!is_null($resolution_strategy) && !in_array($resolution_strategy, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'resolution_strategy', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['resolution_strategy'] = $resolution_strategy;

        return $this;
    }

    /**
     * Gets keep_share_links
     *
     * @return bool
     */
    public function getKeepShareLinks()
    {
        return $this->container['keep_share_links'];
    }

    /**
     * Sets keep_share_links
     *
     * @param bool $keep_share_links Preserve Download Share Links and point them to the new node. (default: `false`)
     *
     * @return $this
     */
    public function setKeepShareLinks($keep_share_links)
    {
        $this->container['keep_share_links'] = $keep_share_links;

        return $this;
    }

    /**
     * Gets node_ids
     *
     * @return int[]
     */
    public function getNodeIds()
    {
        return $this->container['node_ids'];
    }

    /**
     * Sets node_ids
     *
     * @param int[] $node_ids `DEPRECATED`: Node IDs Please use `items` instead.
     *
     * @return $this
     */
    public function setNodeIds($node_ids)
    {
        $this->container['node_ids'] = $node_ids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


