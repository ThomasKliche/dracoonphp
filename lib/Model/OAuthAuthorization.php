<?php
/**
 * OAuthAuthorization
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OAuthAuthorization Class Doc Comment
 *
 * @category Class
 * @description OAuth authorization
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OAuthAuthorization implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OAuthAuthorization';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'client_id' => 'string',
        'client_name' => 'string',
        'is_standard' => 'bool',
        'created_at' => '\DateTime',
        'used_at' => '\DateTime',
        'user_agent_category' => 'string',
        'expires_at' => '\DateTime',
        'user_agent_type' => 'string',
        'user_agent_os' => 'string',
        'user_agent_info' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'client_id' => null,
        'client_name' => null,
        'is_standard' => null,
        'created_at' => 'date-time',
        'used_at' => 'date-time',
        'user_agent_category' => null,
        'expires_at' => 'date-time',
        'user_agent_type' => null,
        'user_agent_os' => null,
        'user_agent_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'client_id' => 'clientId',
        'client_name' => 'clientName',
        'is_standard' => 'isStandard',
        'created_at' => 'createdAt',
        'used_at' => 'usedAt',
        'user_agent_category' => 'userAgentCategory',
        'expires_at' => 'expiresAt',
        'user_agent_type' => 'userAgentType',
        'user_agent_os' => 'userAgentOs',
        'user_agent_info' => 'userAgentInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'client_id' => 'setClientId',
        'client_name' => 'setClientName',
        'is_standard' => 'setIsStandard',
        'created_at' => 'setCreatedAt',
        'used_at' => 'setUsedAt',
        'user_agent_category' => 'setUserAgentCategory',
        'expires_at' => 'setExpiresAt',
        'user_agent_type' => 'setUserAgentType',
        'user_agent_os' => 'setUserAgentOs',
        'user_agent_info' => 'setUserAgentInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'client_id' => 'getClientId',
        'client_name' => 'getClientName',
        'is_standard' => 'getIsStandard',
        'created_at' => 'getCreatedAt',
        'used_at' => 'getUsedAt',
        'user_agent_category' => 'getUserAgentCategory',
        'expires_at' => 'getExpiresAt',
        'user_agent_type' => 'getUserAgentType',
        'user_agent_os' => 'getUserAgentOs',
        'user_agent_info' => 'getUserAgentInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const USER_AGENT_CATEGORY_BROWSER = 'browser';
    const USER_AGENT_CATEGORY_NATIVE = 'native';
    const USER_AGENT_CATEGORY_UNKNOWN = 'unknown';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUserAgentCategoryAllowableValues()
    {
        return [
            self::USER_AGENT_CATEGORY_BROWSER,
            self::USER_AGENT_CATEGORY_NATIVE,
            self::USER_AGENT_CATEGORY_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['client_name'] = isset($data['client_name']) ? $data['client_name'] : null;
        $this->container['is_standard'] = isset($data['is_standard']) ? $data['is_standard'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['used_at'] = isset($data['used_at']) ? $data['used_at'] : null;
        $this->container['user_agent_category'] = isset($data['user_agent_category']) ? $data['user_agent_category'] : null;
        $this->container['expires_at'] = isset($data['expires_at']) ? $data['expires_at'] : null;
        $this->container['user_agent_type'] = isset($data['user_agent_type']) ? $data['user_agent_type'] : null;
        $this->container['user_agent_os'] = isset($data['user_agent_os']) ? $data['user_agent_os'] : null;
        $this->container['user_agent_info'] = isset($data['user_agent_info']) ? $data['user_agent_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['client_name'] === null) {
            $invalidProperties[] = "'client_name' can't be null";
        }
        if ($this->container['user_agent_category'] === null) {
            $invalidProperties[] = "'user_agent_category' can't be null";
        }
        $allowedValues = $this->getUserAgentCategoryAllowableValues();
        if (!is_null($this->container['user_agent_category']) && !in_array($this->container['user_agent_category'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'user_agent_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID of the OAuth authorization  [Since version 4.12.0]
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id ID of the OAuth client
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets client_name
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['client_name'];
    }

    /**
     * Sets client_name
     *
     * @param string $client_name Name, which is shown at the client configuration and authorization.
     *
     * @return $this
     */
    public function setClientName($client_name)
    {
        $this->container['client_name'] = $client_name;

        return $this;
    }

    /**
     * Gets is_standard
     *
     * @return bool
     */
    public function getIsStandard()
    {
        return $this->container['is_standard'];
    }

    /**
     * Sets is_standard
     *
     * @param bool $is_standard Determines whether client is a standard client.  [Since version 4.12.0]
     *
     * @return $this
     */
    public function setIsStandard($is_standard)
    {
        $this->container['is_standard'] = $is_standard;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date of the authorization  [Since version 4.13.0]
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets used_at
     *
     * @return \DateTime
     */
    public function getUsedAt()
    {
        return $this->container['used_at'];
    }

    /**
     * Sets used_at
     *
     * @param \DateTime $used_at Usage date of the authorization (Time of last usage.)  [Since version 4.13.0]
     *
     * @return $this
     */
    public function setUsedAt($used_at)
    {
        $this->container['used_at'] = $used_at;

        return $this;
    }

    /**
     * Gets user_agent_category
     *
     * @return string
     */
    public function getUserAgentCategory()
    {
        return $this->container['user_agent_category'];
    }

    /**
     * Sets user_agent_category
     *
     * @param string $user_agent_category User agent category.  [Since version 4.12.0]
     *
     * @return $this
     */
    public function setUserAgentCategory($user_agent_category)
    {
        $allowedValues = $this->getUserAgentCategoryAllowableValues();
        if (!in_array($user_agent_category, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'user_agent_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['user_agent_category'] = $user_agent_category;

        return $this;
    }

    /**
     * Gets expires_at
     *
     * @return \DateTime
     */
    public function getExpiresAt()
    {
        return $this->container['expires_at'];
    }

    /**
     * Sets expires_at
     *
     * @param \DateTime $expires_at Expiration date of the authorization
     *
     * @return $this
     */
    public function setExpiresAt($expires_at)
    {
        $this->container['expires_at'] = $expires_at;

        return $this;
    }

    /**
     * Gets user_agent_type
     *
     * @return string
     */
    public function getUserAgentType()
    {
        return $this->container['user_agent_type'];
    }

    /**
     * Sets user_agent_type
     *
     * @param string $user_agent_type User agent type.  [Since version 4.12.0]
     *
     * @return $this
     */
    public function setUserAgentType($user_agent_type)
    {
        $this->container['user_agent_type'] = $user_agent_type;

        return $this;
    }

    /**
     * Gets user_agent_os
     *
     * @return string
     */
    public function getUserAgentOs()
    {
        return $this->container['user_agent_os'];
    }

    /**
     * Sets user_agent_os
     *
     * @param string $user_agent_os User agent OS.  [Since version 4.12.0]
     *
     * @return $this
     */
    public function setUserAgentOs($user_agent_os)
    {
        $this->container['user_agent_os'] = $user_agent_os;

        return $this;
    }

    /**
     * Gets user_agent_info
     *
     * @return string
     */
    public function getUserAgentInfo()
    {
        return $this->container['user_agent_info'];
    }

    /**
     * Sets user_agent_info
     *
     * @param string $user_agent_info User agent info.  [Since version 4.12.0]
     *
     * @return $this
     */
    public function setUserAgentInfo($user_agent_info)
    {
        $this->container['user_agent_info'] = $user_agent_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


