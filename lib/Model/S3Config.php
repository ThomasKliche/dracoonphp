<?php
/**
 * S3Config
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * S3Config Class Doc Comment
 *
 * @category Class
 * @description S3 configuration
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class S3Config implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'S3Config';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'endpoint_url' => 'string',
        'bucket_name' => 'string',
        'access_key_defined' => 'bool',
        'secret_key_defined' => 'bool',
        'region' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'endpoint_url' => null,
        'bucket_name' => null,
        'access_key_defined' => null,
        'secret_key_defined' => null,
        'region' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'endpoint_url' => 'endpointUrl',
        'bucket_name' => 'bucketName',
        'access_key_defined' => 'accessKeyDefined',
        'secret_key_defined' => 'secretKeyDefined',
        'region' => 'region'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'endpoint_url' => 'setEndpointUrl',
        'bucket_name' => 'setBucketName',
        'access_key_defined' => 'setAccessKeyDefined',
        'secret_key_defined' => 'setSecretKeyDefined',
        'region' => 'setRegion'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'endpoint_url' => 'getEndpointUrl',
        'bucket_name' => 'getBucketName',
        'access_key_defined' => 'getAccessKeyDefined',
        'secret_key_defined' => 'getSecretKeyDefined',
        'region' => 'getRegion'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['endpoint_url'] = isset($data['endpoint_url']) ? $data['endpoint_url'] : null;
        $this->container['bucket_name'] = isset($data['bucket_name']) ? $data['bucket_name'] : null;
        $this->container['access_key_defined'] = isset($data['access_key_defined']) ? $data['access_key_defined'] : null;
        $this->container['secret_key_defined'] = isset($data['secret_key_defined']) ? $data['secret_key_defined'] : null;
        $this->container['region'] = isset($data['region']) ? $data['region'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['endpoint_url'] === null) {
            $invalidProperties[] = "'endpoint_url' can't be null";
        }
        if ($this->container['bucket_name'] === null) {
            $invalidProperties[] = "'bucket_name' can't be null";
        }
        if ($this->container['access_key_defined'] === null) {
            $invalidProperties[] = "'access_key_defined' can't be null";
        }
        if ($this->container['secret_key_defined'] === null) {
            $invalidProperties[] = "'secret_key_defined' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets endpoint_url
     *
     * @return string
     */
    public function getEndpointUrl()
    {
        return $this->container['endpoint_url'];
    }

    /**
     * Sets endpoint_url
     *
     * @param string $endpoint_url S3 object storage endpoint URL
     *
     * @return $this
     */
    public function setEndpointUrl($endpoint_url)
    {
        $this->container['endpoint_url'] = $endpoint_url;

        return $this;
    }

    /**
     * Gets bucket_name
     *
     * @return string
     */
    public function getBucketName()
    {
        return $this->container['bucket_name'];
    }

    /**
     * Sets bucket_name
     *
     * @param string $bucket_name S3 bucket name
     *
     * @return $this
     */
    public function setBucketName($bucket_name)
    {
        $this->container['bucket_name'] = $bucket_name;

        return $this;
    }

    /**
     * Gets access_key_defined
     *
     * @return bool
     */
    public function getAccessKeyDefined()
    {
        return $this->container['access_key_defined'];
    }

    /**
     * Sets access_key_defined
     *
     * @param bool $access_key_defined Determines whether Access Key ID is defined
     *
     * @return $this
     */
    public function setAccessKeyDefined($access_key_defined)
    {
        $this->container['access_key_defined'] = $access_key_defined;

        return $this;
    }

    /**
     * Gets secret_key_defined
     *
     * @return bool
     */
    public function getSecretKeyDefined()
    {
        return $this->container['secret_key_defined'];
    }

    /**
     * Sets secret_key_defined
     *
     * @param bool $secret_key_defined Determines whether Access Secret Key is defined
     *
     * @return $this
     */
    public function setSecretKeyDefined($secret_key_defined)
    {
        $this->container['secret_key_defined'] = $secret_key_defined;

        return $this;
    }

    /**
     * Gets region
     *
     * @return string
     */
    public function getRegion()
    {
        return $this->container['region'];
    }

    /**
     * Sets region
     *
     * @param string $region S3 region
     *
     * @return $this
     */
    public function setRegion($region)
    {
        $this->container['region'] = $region;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


