<?php
/**
 * UploadShare
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UploadShare Class Doc Comment
 *
 * @category Class
 * @description Upload Share information
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UploadShare implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UploadShare';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'target_id' => 'int',
        'is_protected' => 'bool',
        'access_key' => 'string',
        'notify_creator' => 'bool',
        'created_at' => '\DateTime',
        'created_by' => '\Swagger\Client\Model\UserInfo',
        'updated_at' => '\DateTime',
        'updated_by' => '\Swagger\Client\Model\UserInfo',
        'expire_at' => '\DateTime',
        'target_path' => 'string',
        'is_encrypted' => 'bool',
        'internal_notes' => 'string',
        'notes' => 'string',
        'files_expiry_period' => 'int',
        'cnt_files' => 'int',
        'cnt_uploads' => 'int',
        'show_uploaded_files' => 'bool',
        'data_url' => 'string',
        'max_slots' => 'int',
        'max_size' => 'int',
        'target_type' => 'string',
        'show_creator_name' => 'bool',
        'show_creator_username' => 'bool',
        'recipients' => 'string',
        'sms_recipients' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'target_id' => 'int64',
        'is_protected' => null,
        'access_key' => null,
        'notify_creator' => null,
        'created_at' => 'date-time',
        'created_by' => null,
        'updated_at' => 'date-time',
        'updated_by' => null,
        'expire_at' => 'date-time',
        'target_path' => null,
        'is_encrypted' => null,
        'internal_notes' => null,
        'notes' => null,
        'files_expiry_period' => 'int32',
        'cnt_files' => 'int32',
        'cnt_uploads' => 'int32',
        'show_uploaded_files' => null,
        'data_url' => null,
        'max_slots' => 'int32',
        'max_size' => 'int64',
        'target_type' => null,
        'show_creator_name' => null,
        'show_creator_username' => null,
        'recipients' => null,
        'sms_recipients' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'target_id' => 'targetId',
        'is_protected' => 'isProtected',
        'access_key' => 'accessKey',
        'notify_creator' => 'notifyCreator',
        'created_at' => 'createdAt',
        'created_by' => 'createdBy',
        'updated_at' => 'updatedAt',
        'updated_by' => 'updatedBy',
        'expire_at' => 'expireAt',
        'target_path' => 'targetPath',
        'is_encrypted' => 'isEncrypted',
        'internal_notes' => 'internalNotes',
        'notes' => 'notes',
        'files_expiry_period' => 'filesExpiryPeriod',
        'cnt_files' => 'cntFiles',
        'cnt_uploads' => 'cntUploads',
        'show_uploaded_files' => 'showUploadedFiles',
        'data_url' => 'dataUrl',
        'max_slots' => 'maxSlots',
        'max_size' => 'maxSize',
        'target_type' => 'targetType',
        'show_creator_name' => 'showCreatorName',
        'show_creator_username' => 'showCreatorUsername',
        'recipients' => 'recipients',
        'sms_recipients' => 'smsRecipients'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'target_id' => 'setTargetId',
        'is_protected' => 'setIsProtected',
        'access_key' => 'setAccessKey',
        'notify_creator' => 'setNotifyCreator',
        'created_at' => 'setCreatedAt',
        'created_by' => 'setCreatedBy',
        'updated_at' => 'setUpdatedAt',
        'updated_by' => 'setUpdatedBy',
        'expire_at' => 'setExpireAt',
        'target_path' => 'setTargetPath',
        'is_encrypted' => 'setIsEncrypted',
        'internal_notes' => 'setInternalNotes',
        'notes' => 'setNotes',
        'files_expiry_period' => 'setFilesExpiryPeriod',
        'cnt_files' => 'setCntFiles',
        'cnt_uploads' => 'setCntUploads',
        'show_uploaded_files' => 'setShowUploadedFiles',
        'data_url' => 'setDataUrl',
        'max_slots' => 'setMaxSlots',
        'max_size' => 'setMaxSize',
        'target_type' => 'setTargetType',
        'show_creator_name' => 'setShowCreatorName',
        'show_creator_username' => 'setShowCreatorUsername',
        'recipients' => 'setRecipients',
        'sms_recipients' => 'setSmsRecipients'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'target_id' => 'getTargetId',
        'is_protected' => 'getIsProtected',
        'access_key' => 'getAccessKey',
        'notify_creator' => 'getNotifyCreator',
        'created_at' => 'getCreatedAt',
        'created_by' => 'getCreatedBy',
        'updated_at' => 'getUpdatedAt',
        'updated_by' => 'getUpdatedBy',
        'expire_at' => 'getExpireAt',
        'target_path' => 'getTargetPath',
        'is_encrypted' => 'getIsEncrypted',
        'internal_notes' => 'getInternalNotes',
        'notes' => 'getNotes',
        'files_expiry_period' => 'getFilesExpiryPeriod',
        'cnt_files' => 'getCntFiles',
        'cnt_uploads' => 'getCntUploads',
        'show_uploaded_files' => 'getShowUploadedFiles',
        'data_url' => 'getDataUrl',
        'max_slots' => 'getMaxSlots',
        'max_size' => 'getMaxSize',
        'target_type' => 'getTargetType',
        'show_creator_name' => 'getShowCreatorName',
        'show_creator_username' => 'getShowCreatorUsername',
        'recipients' => 'getRecipients',
        'sms_recipients' => 'getSmsRecipients'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['target_id'] = isset($data['target_id']) ? $data['target_id'] : null;
        $this->container['is_protected'] = isset($data['is_protected']) ? $data['is_protected'] : null;
        $this->container['access_key'] = isset($data['access_key']) ? $data['access_key'] : null;
        $this->container['notify_creator'] = isset($data['notify_creator']) ? $data['notify_creator'] : null;
        $this->container['created_at'] = isset($data['created_at']) ? $data['created_at'] : null;
        $this->container['created_by'] = isset($data['created_by']) ? $data['created_by'] : null;
        $this->container['updated_at'] = isset($data['updated_at']) ? $data['updated_at'] : null;
        $this->container['updated_by'] = isset($data['updated_by']) ? $data['updated_by'] : null;
        $this->container['expire_at'] = isset($data['expire_at']) ? $data['expire_at'] : null;
        $this->container['target_path'] = isset($data['target_path']) ? $data['target_path'] : null;
        $this->container['is_encrypted'] = isset($data['is_encrypted']) ? $data['is_encrypted'] : null;
        $this->container['internal_notes'] = isset($data['internal_notes']) ? $data['internal_notes'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['files_expiry_period'] = isset($data['files_expiry_period']) ? $data['files_expiry_period'] : null;
        $this->container['cnt_files'] = isset($data['cnt_files']) ? $data['cnt_files'] : null;
        $this->container['cnt_uploads'] = isset($data['cnt_uploads']) ? $data['cnt_uploads'] : null;
        $this->container['show_uploaded_files'] = isset($data['show_uploaded_files']) ? $data['show_uploaded_files'] : null;
        $this->container['data_url'] = isset($data['data_url']) ? $data['data_url'] : null;
        $this->container['max_slots'] = isset($data['max_slots']) ? $data['max_slots'] : null;
        $this->container['max_size'] = isset($data['max_size']) ? $data['max_size'] : null;
        $this->container['target_type'] = isset($data['target_type']) ? $data['target_type'] : null;
        $this->container['show_creator_name'] = isset($data['show_creator_name']) ? $data['show_creator_name'] : null;
        $this->container['show_creator_username'] = isset($data['show_creator_username']) ? $data['show_creator_username'] : null;
        $this->container['recipients'] = isset($data['recipients']) ? $data['recipients'] : null;
        $this->container['sms_recipients'] = isset($data['sms_recipients']) ? $data['sms_recipients'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['target_id'] === null) {
            $invalidProperties[] = "'target_id' can't be null";
        }
        if ($this->container['is_protected'] === null) {
            $invalidProperties[] = "'is_protected' can't be null";
        }
        if ($this->container['access_key'] === null) {
            $invalidProperties[] = "'access_key' can't be null";
        }
        if ($this->container['notify_creator'] === null) {
            $invalidProperties[] = "'notify_creator' can't be null";
        }
        if ($this->container['created_at'] === null) {
            $invalidProperties[] = "'created_at' can't be null";
        }
        if ($this->container['created_by'] === null) {
            $invalidProperties[] = "'created_by' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Share ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Alias name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets target_id
     *
     * @return int
     */
    public function getTargetId()
    {
        return $this->container['target_id'];
    }

    /**
     * Sets target_id
     *
     * @param int $target_id Target room or folder ID
     *
     * @return $this
     */
    public function setTargetId($target_id)
    {
        $this->container['target_id'] = $target_id;

        return $this;
    }

    /**
     * Gets is_protected
     *
     * @return bool
     */
    public function getIsProtected()
    {
        return $this->container['is_protected'];
    }

    /**
     * Sets is_protected
     *
     * @param bool $is_protected Is share protected by password
     *
     * @return $this
     */
    public function setIsProtected($is_protected)
    {
        $this->container['is_protected'] = $is_protected;

        return $this;
    }

    /**
     * Gets access_key
     *
     * @return string
     */
    public function getAccessKey()
    {
        return $this->container['access_key'];
    }

    /**
     * Sets access_key
     *
     * @param string $access_key Share access key to generate secure link
     *
     * @return $this
     */
    public function setAccessKey($access_key)
    {
        $this->container['access_key'] = $access_key;

        return $this;
    }

    /**
     * Gets notify_creator
     *
     * @return bool
     */
    public function getNotifyCreator()
    {
        return $this->container['notify_creator'];
    }

    /**
     * Sets notify_creator
     *
     * @param bool $notify_creator Notify creator on every upload.
     *
     * @return $this
     */
    public function setNotifyCreator($notify_creator)
    {
        $this->container['notify_creator'] = $notify_creator;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param \DateTime $created_at Creation date
     *
     * @return $this
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets created_by
     *
     * @return \Swagger\Client\Model\UserInfo
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param \Swagger\Client\Model\UserInfo $created_by Created by user
     *
     * @return $this
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return \DateTime
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param \DateTime $updated_at Modification date
     *
     * @return $this
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return \Swagger\Client\Model\UserInfo
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param \Swagger\Client\Model\UserInfo $updated_by Modified by user
     *
     * @return $this
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets expire_at
     *
     * @return \DateTime
     */
    public function getExpireAt()
    {
        return $this->container['expire_at'];
    }

    /**
     * Sets expire_at
     *
     * @param \DateTime $expire_at Expiration date
     *
     * @return $this
     */
    public function setExpireAt($expire_at)
    {
        $this->container['expire_at'] = $expire_at;

        return $this;
    }

    /**
     * Gets target_path
     *
     * @return string
     */
    public function getTargetPath()
    {
        return $this->container['target_path'];
    }

    /**
     * Sets target_path
     *
     * @param string $target_path Path to shared upload node
     *
     * @return $this
     */
    public function setTargetPath($target_path)
    {
        $this->container['target_path'] = $target_path;

        return $this;
    }

    /**
     * Gets is_encrypted
     *
     * @return bool
     */
    public function getIsEncrypted()
    {
        return $this->container['is_encrypted'];
    }

    /**
     * Sets is_encrypted
     *
     * @param bool $is_encrypted Encryption state
     *
     * @return $this
     */
    public function setIsEncrypted($is_encrypted)
    {
        $this->container['is_encrypted'] = $is_encrypted;

        return $this;
    }

    /**
     * Gets internal_notes
     *
     * @return string
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     *
     * @param string $internal_notes Internal notes (limited to 255 characters)
     *
     * @return $this
     */
    public function setInternalNotes($internal_notes)
    {
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes User notes (limited to 255 characters)
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets files_expiry_period
     *
     * @return int
     */
    public function getFilesExpiryPeriod()
    {
        return $this->container['files_expiry_period'];
    }

    /**
     * Sets files_expiry_period
     *
     * @param int $files_expiry_period Number of days after which uploaded files expire
     *
     * @return $this
     */
    public function setFilesExpiryPeriod($files_expiry_period)
    {
        $this->container['files_expiry_period'] = $files_expiry_period;

        return $this;
    }

    /**
     * Gets cnt_files
     *
     * @return int
     */
    public function getCntFiles()
    {
        return $this->container['cnt_files'];
    }

    /**
     * Sets cnt_files
     *
     * @param int $cnt_files Total amount of existing files uploaded with this share.
     *
     * @return $this
     */
    public function setCntFiles($cnt_files)
    {
        $this->container['cnt_files'] = $cnt_files;

        return $this;
    }

    /**
     * Gets cnt_uploads
     *
     * @return int
     */
    public function getCntUploads()
    {
        return $this->container['cnt_uploads'];
    }

    /**
     * Sets cnt_uploads
     *
     * @param int $cnt_uploads Total amount of uploads conducted with this share.
     *
     * @return $this
     */
    public function setCntUploads($cnt_uploads)
    {
        $this->container['cnt_uploads'] = $cnt_uploads;

        return $this;
    }

    /**
     * Gets show_uploaded_files
     *
     * @return bool
     */
    public function getShowUploadedFiles()
    {
        return $this->container['show_uploaded_files'];
    }

    /**
     * Sets show_uploaded_files
     *
     * @param bool $show_uploaded_files Allow display of already uploaded files
     *
     * @return $this
     */
    public function setShowUploadedFiles($show_uploaded_files)
    {
        $this->container['show_uploaded_files'] = $show_uploaded_files;

        return $this;
    }

    /**
     * Gets data_url
     *
     * @return string
     */
    public function getDataUrl()
    {
        return $this->container['data_url'];
    }

    /**
     * Sets data_url
     *
     * @param string $data_url Upload Share URL
     *
     * @return $this
     */
    public function setDataUrl($data_url)
    {
        $this->container['data_url'] = $data_url;

        return $this;
    }

    /**
     * Gets max_slots
     *
     * @return int
     */
    public function getMaxSlots()
    {
        return $this->container['max_slots'];
    }

    /**
     * Sets max_slots
     *
     * @param int $max_slots Maximal amount of files to upload
     *
     * @return $this
     */
    public function setMaxSlots($max_slots)
    {
        $this->container['max_slots'] = $max_slots;

        return $this;
    }

    /**
     * Gets max_size
     *
     * @return int
     */
    public function getMaxSize()
    {
        return $this->container['max_size'];
    }

    /**
     * Sets max_size
     *
     * @param int $max_size Maximal total size of uploaded files (in bytes)
     *
     * @return $this
     */
    public function setMaxSize($max_size)
    {
        $this->container['max_size'] = $max_size;

        return $this;
    }

    /**
     * Gets target_type
     *
     * @return string
     */
    public function getTargetType()
    {
        return $this->container['target_type'];
    }

    /**
     * Sets target_type
     *
     * @param string $target_type Node type
     *
     * @return $this
     */
    public function setTargetType($target_type)
    {
        $this->container['target_type'] = $target_type;

        return $this;
    }

    /**
     * Gets show_creator_name
     *
     * @return bool
     */
    public function getShowCreatorName()
    {
        return $this->container['show_creator_name'];
    }

    /**
     * Sets show_creator_name
     *
     * @param bool $show_creator_name Show creator first and last name.  [Since version 4.11.0]
     *
     * @return $this
     */
    public function setShowCreatorName($show_creator_name)
    {
        $this->container['show_creator_name'] = $show_creator_name;

        return $this;
    }

    /**
     * Gets show_creator_username
     *
     * @return bool
     */
    public function getShowCreatorUsername()
    {
        return $this->container['show_creator_username'];
    }

    /**
     * Sets show_creator_username
     *
     * @param bool $show_creator_username Show creator email address.  [Since version 4.11.0]
     *
     * @return $this
     */
    public function setShowCreatorUsername($show_creator_username)
    {
        $this->container['show_creator_username'] = $show_creator_username;

        return $this;
    }

    /**
     * Gets recipients
     *
     * @return string
     */
    public function getRecipients()
    {
        return $this->container['recipients'];
    }

    /**
     * Sets recipients
     *
     * @param string $recipients `DEPRECATED`: CSV string of recipient email addresses  [Deprecated since version 4.11.0]
     *
     * @return $this
     */
    public function setRecipients($recipients)
    {
        $this->container['recipients'] = $recipients;

        return $this;
    }

    /**
     * Gets sms_recipients
     *
     * @return string
     */
    public function getSmsRecipients()
    {
        return $this->container['sms_recipients'];
    }

    /**
     * Sets sms_recipients
     *
     * @param string $sms_recipients `DEPRECATED`: CSV string of recipient MSISDNs  [Deprecated since version 4.11.0]
     *
     * @return $this
     */
    public function setSmsRecipients($sms_recipients)
    {
        $this->container['sms_recipients'] = $sms_recipients;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


