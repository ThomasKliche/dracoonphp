<?php
/**
 * CreateUserRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CreateUserRequest Class Doc Comment
 *
 * @category Class
 * @description Request model for creating an user
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CreateUserRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CreateUserRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'first_name' => 'string',
        'last_name' => 'string',
        'user_name' => 'string',
        'title' => 'string',
        'phone' => 'string',
        'expiration' => '\Swagger\Client\Model\ObjectExpiration',
        'receiver_language' => 'string',
        'email' => 'string',
        'notify_user' => 'bool',
        'auth_data' => '\Swagger\Client\Model\UserAuthData',
        'is_nonmember_viewer' => 'bool',
        'password' => 'string',
        'login' => 'string',
        'auth_methods' => '\Swagger\Client\Model\UserAuthMethod[]',
        'needs_to_change_password' => 'bool',
        'gender' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'first_name' => null,
        'last_name' => null,
        'user_name' => null,
        'title' => null,
        'phone' => null,
        'expiration' => null,
        'receiver_language' => null,
        'email' => null,
        'notify_user' => null,
        'auth_data' => null,
        'is_nonmember_viewer' => null,
        'password' => null,
        'login' => null,
        'auth_methods' => null,
        'needs_to_change_password' => null,
        'gender' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'first_name' => 'firstName',
        'last_name' => 'lastName',
        'user_name' => 'userName',
        'title' => 'title',
        'phone' => 'phone',
        'expiration' => 'expiration',
        'receiver_language' => 'receiverLanguage',
        'email' => 'email',
        'notify_user' => 'notifyUser',
        'auth_data' => 'authData',
        'is_nonmember_viewer' => 'isNonmemberViewer',
        'password' => 'password',
        'login' => 'login',
        'auth_methods' => 'authMethods',
        'needs_to_change_password' => 'needsToChangePassword',
        'gender' => 'gender'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'user_name' => 'setUserName',
        'title' => 'setTitle',
        'phone' => 'setPhone',
        'expiration' => 'setExpiration',
        'receiver_language' => 'setReceiverLanguage',
        'email' => 'setEmail',
        'notify_user' => 'setNotifyUser',
        'auth_data' => 'setAuthData',
        'is_nonmember_viewer' => 'setIsNonmemberViewer',
        'password' => 'setPassword',
        'login' => 'setLogin',
        'auth_methods' => 'setAuthMethods',
        'needs_to_change_password' => 'setNeedsToChangePassword',
        'gender' => 'setGender'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'user_name' => 'getUserName',
        'title' => 'getTitle',
        'phone' => 'getPhone',
        'expiration' => 'getExpiration',
        'receiver_language' => 'getReceiverLanguage',
        'email' => 'getEmail',
        'notify_user' => 'getNotifyUser',
        'auth_data' => 'getAuthData',
        'is_nonmember_viewer' => 'getIsNonmemberViewer',
        'password' => 'getPassword',
        'login' => 'getLogin',
        'auth_methods' => 'getAuthMethods',
        'needs_to_change_password' => 'getNeedsToChangePassword',
        'gender' => 'getGender'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['user_name'] = isset($data['user_name']) ? $data['user_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['phone'] = isset($data['phone']) ? $data['phone'] : null;
        $this->container['expiration'] = isset($data['expiration']) ? $data['expiration'] : null;
        $this->container['receiver_language'] = isset($data['receiver_language']) ? $data['receiver_language'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['notify_user'] = isset($data['notify_user']) ? $data['notify_user'] : null;
        $this->container['auth_data'] = isset($data['auth_data']) ? $data['auth_data'] : null;
        $this->container['is_nonmember_viewer'] = isset($data['is_nonmember_viewer']) ? $data['is_nonmember_viewer'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['login'] = isset($data['login']) ? $data['login'] : null;
        $this->container['auth_methods'] = isset($data['auth_methods']) ? $data['auth_methods'] : null;
        $this->container['needs_to_change_password'] = isset($data['needs_to_change_password']) ? $data['needs_to_change_password'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name User first name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name User last name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name Username
     *
     * @return $this
     */
    public function setUserName($user_name)
    {
        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Job title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone Phone number
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets expiration
     *
     * @return \Swagger\Client\Model\ObjectExpiration
     */
    public function getExpiration()
    {
        return $this->container['expiration'];
    }

    /**
     * Sets expiration
     *
     * @param \Swagger\Client\Model\ObjectExpiration $expiration Expiration date / time
     *
     * @return $this
     */
    public function setExpiration($expiration)
    {
        $this->container['expiration'] = $expiration;

        return $this;
    }

    /**
     * Gets receiver_language
     *
     * @return string
     */
    public function getReceiverLanguage()
    {
        return $this->container['receiver_language'];
    }

    /**
     * Sets receiver_language
     *
     * @param string $receiver_language IETF language tag
     *
     * @return $this
     */
    public function setReceiverLanguage($receiver_language)
    {
        $this->container['receiver_language'] = $receiver_language;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets notify_user
     *
     * @return bool
     */
    public function getNotifyUser()
    {
        return $this->container['notify_user'];
    }

    /**
     * Sets notify_user
     *
     * @param bool $notify_user Notify user about his new account * default: `true` for `basic` auth type * default: `false` for `active_directory`, `openid` and `radius` auth types
     *
     * @return $this
     */
    public function setNotifyUser($notify_user)
    {
        $this->container['notify_user'] = $notify_user;

        return $this;
    }

    /**
     * Gets auth_data
     *
     * @return \Swagger\Client\Model\UserAuthData
     */
    public function getAuthData()
    {
        return $this->container['auth_data'];
    }

    /**
     * Sets auth_data
     *
     * @param \Swagger\Client\Model\UserAuthData $auth_data Authentication methods: * `sql` * `active_directory` * `radius` * `openid`
     *
     * @return $this
     */
    public function setAuthData($auth_data)
    {
        $this->container['auth_data'] = $auth_data;

        return $this;
    }

    /**
     * Gets is_nonmember_viewer
     *
     * @return bool
     */
    public function getIsNonmemberViewer()
    {
        return $this->container['is_nonmember_viewer'];
    }

    /**
     * Sets is_nonmember_viewer
     *
     * @param bool $is_nonmember_viewer Determines whether user has the role NONMEMBER_VIEWER
     *
     * @return $this
     */
    public function setIsNonmemberViewer($is_nonmember_viewer)
    {
        $this->container['is_nonmember_viewer'] = $is_nonmember_viewer;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password `DEPRECATED`: An initial password may be preset use `authData` instead
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets login
     *
     * @return string
     */
    public function getLogin()
    {
        return $this->container['login'];
    }

    /**
     * Sets login
     *
     * @param string $login `DEPRECATED`: User login name will be removed
     *
     * @return $this
     */
    public function setLogin($login)
    {
        $this->container['login'] = $login;

        return $this;
    }

    /**
     * Gets auth_methods
     *
     * @return \Swagger\Client\Model\UserAuthMethod[]
     */
    public function getAuthMethods()
    {
        return $this->container['auth_methods'];
    }

    /**
     * Sets auth_methods
     *
     * @param \Swagger\Client\Model\UserAuthMethod[] $auth_methods `DEPRECATED`: Authentication methods: * `sql` * `active_directory` * `radius` * `openid` use `authData` instead
     *
     * @return $this
     */
    public function setAuthMethods($auth_methods)
    {
        $this->container['auth_methods'] = $auth_methods;

        return $this;
    }

    /**
     * Gets needs_to_change_password
     *
     * @return bool
     */
    public function getNeedsToChangePassword()
    {
        return $this->container['needs_to_change_password'];
    }

    /**
     * Sets needs_to_change_password
     *
     * @param bool $needs_to_change_password `DEPRECATED`: Determines whether user has to change his / her initial password. use `authDate.mustChangePassword` instead
     *
     * @return $this
     */
    public function setNeedsToChangePassword($needs_to_change_password)
    {
        $this->container['needs_to_change_password'] = $needs_to_change_password;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender `DEPRECATED`: Gender Do NOT use `gender`! It will be ignored.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


