<?php
/**
 * GeneralSettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GeneralSettings Class Doc Comment
 *
 * @category Class
 * @description General settings
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GeneralSettings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GeneralSettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'share_password_sms_enabled' => 'bool',
        'crypto_enabled' => 'bool',
        'email_notification_button_enabled' => 'bool',
        'eula_enabled' => 'bool',
        'use_s3_storage' => 'bool',
        's3_tags_enabled' => 'bool',
        'auth_token_restrictions' => '\Swagger\Client\Model\AuthTokenRestrictions',
        'hide_login_input_fields' => 'bool',
        'media_server_enabled' => 'bool',
        'weak_password_enabled' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'share_password_sms_enabled' => null,
        'crypto_enabled' => null,
        'email_notification_button_enabled' => null,
        'eula_enabled' => null,
        'use_s3_storage' => null,
        's3_tags_enabled' => null,
        'auth_token_restrictions' => null,
        'hide_login_input_fields' => null,
        'media_server_enabled' => null,
        'weak_password_enabled' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'share_password_sms_enabled' => 'sharePasswordSmsEnabled',
        'crypto_enabled' => 'cryptoEnabled',
        'email_notification_button_enabled' => 'emailNotificationButtonEnabled',
        'eula_enabled' => 'eulaEnabled',
        'use_s3_storage' => 'useS3Storage',
        's3_tags_enabled' => 's3TagsEnabled',
        'auth_token_restrictions' => 'authTokenRestrictions',
        'hide_login_input_fields' => 'hideLoginInputFields',
        'media_server_enabled' => 'mediaServerEnabled',
        'weak_password_enabled' => 'weakPasswordEnabled'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'share_password_sms_enabled' => 'setSharePasswordSmsEnabled',
        'crypto_enabled' => 'setCryptoEnabled',
        'email_notification_button_enabled' => 'setEmailNotificationButtonEnabled',
        'eula_enabled' => 'setEulaEnabled',
        'use_s3_storage' => 'setUseS3Storage',
        's3_tags_enabled' => 'setS3TagsEnabled',
        'auth_token_restrictions' => 'setAuthTokenRestrictions',
        'hide_login_input_fields' => 'setHideLoginInputFields',
        'media_server_enabled' => 'setMediaServerEnabled',
        'weak_password_enabled' => 'setWeakPasswordEnabled'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'share_password_sms_enabled' => 'getSharePasswordSmsEnabled',
        'crypto_enabled' => 'getCryptoEnabled',
        'email_notification_button_enabled' => 'getEmailNotificationButtonEnabled',
        'eula_enabled' => 'getEulaEnabled',
        'use_s3_storage' => 'getUseS3Storage',
        's3_tags_enabled' => 'getS3TagsEnabled',
        'auth_token_restrictions' => 'getAuthTokenRestrictions',
        'hide_login_input_fields' => 'getHideLoginInputFields',
        'media_server_enabled' => 'getMediaServerEnabled',
        'weak_password_enabled' => 'getWeakPasswordEnabled'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['share_password_sms_enabled'] = isset($data['share_password_sms_enabled']) ? $data['share_password_sms_enabled'] : null;
        $this->container['crypto_enabled'] = isset($data['crypto_enabled']) ? $data['crypto_enabled'] : null;
        $this->container['email_notification_button_enabled'] = isset($data['email_notification_button_enabled']) ? $data['email_notification_button_enabled'] : null;
        $this->container['eula_enabled'] = isset($data['eula_enabled']) ? $data['eula_enabled'] : null;
        $this->container['use_s3_storage'] = isset($data['use_s3_storage']) ? $data['use_s3_storage'] : null;
        $this->container['s3_tags_enabled'] = isset($data['s3_tags_enabled']) ? $data['s3_tags_enabled'] : null;
        $this->container['auth_token_restrictions'] = isset($data['auth_token_restrictions']) ? $data['auth_token_restrictions'] : null;
        $this->container['hide_login_input_fields'] = isset($data['hide_login_input_fields']) ? $data['hide_login_input_fields'] : null;
        $this->container['media_server_enabled'] = isset($data['media_server_enabled']) ? $data['media_server_enabled'] : null;
        $this->container['weak_password_enabled'] = isset($data['weak_password_enabled']) ? $data['weak_password_enabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets share_password_sms_enabled
     *
     * @return bool
     */
    public function getSharePasswordSmsEnabled()
    {
        return $this->container['share_password_sms_enabled'];
    }

    /**
     * Sets share_password_sms_enabled
     *
     * @param bool $share_password_sms_enabled Allow sending of share passwords via SMS
     *
     * @return $this
     */
    public function setSharePasswordSmsEnabled($share_password_sms_enabled)
    {
        $this->container['share_password_sms_enabled'] = $share_password_sms_enabled;

        return $this;
    }

    /**
     * Gets crypto_enabled
     *
     * @return bool
     */
    public function getCryptoEnabled()
    {
        return $this->container['crypto_enabled'];
    }

    /**
     * Sets crypto_enabled
     *
     * @param bool $crypto_enabled Activation status of client-side encryption. Can only be enabled once; disabling is not possible.
     *
     * @return $this
     */
    public function setCryptoEnabled($crypto_enabled)
    {
        $this->container['crypto_enabled'] = $crypto_enabled;

        return $this;
    }

    /**
     * Gets email_notification_button_enabled
     *
     * @return bool
     */
    public function getEmailNotificationButtonEnabled()
    {
        return $this->container['email_notification_button_enabled'];
    }

    /**
     * Sets email_notification_button_enabled
     *
     * @param bool $email_notification_button_enabled Enable email notification button
     *
     * @return $this
     */
    public function setEmailNotificationButtonEnabled($email_notification_button_enabled)
    {
        $this->container['email_notification_button_enabled'] = $email_notification_button_enabled;

        return $this;
    }

    /**
     * Gets eula_enabled
     *
     * @return bool
     */
    public function getEulaEnabled()
    {
        return $this->container['eula_enabled'];
    }

    /**
     * Sets eula_enabled
     *
     * @param bool $eula_enabled Each user has to confirm the EULA at first login.
     *
     * @return $this
     */
    public function setEulaEnabled($eula_enabled)
    {
        $this->container['eula_enabled'] = $eula_enabled;

        return $this;
    }

    /**
     * Gets use_s3_storage
     *
     * @return bool
     */
    public function getUseS3Storage()
    {
        return $this->container['use_s3_storage'];
    }

    /**
     * Sets use_s3_storage
     *
     * @param bool $use_s3_storage Defines if S3 is used as storage backend
     *
     * @return $this
     */
    public function setUseS3Storage($use_s3_storage)
    {
        $this->container['use_s3_storage'] = $use_s3_storage;

        return $this;
    }

    /**
     * Gets s3_tags_enabled
     *
     * @return bool
     */
    public function getS3TagsEnabled()
    {
        return $this->container['s3_tags_enabled'];
    }

    /**
     * Sets s3_tags_enabled
     *
     * @param bool $s3_tags_enabled Defines if S3 tags are enabled  [Since version 4.9.0]
     *
     * @return $this
     */
    public function setS3TagsEnabled($s3_tags_enabled)
    {
        $this->container['s3_tags_enabled'] = $s3_tags_enabled;

        return $this;
    }

    /**
     * Gets auth_token_restrictions
     *
     * @return \Swagger\Client\Model\AuthTokenRestrictions
     */
    public function getAuthTokenRestrictions()
    {
        return $this->container['auth_token_restrictions'];
    }

    /**
     * Sets auth_token_restrictions
     *
     * @param \Swagger\Client\Model\AuthTokenRestrictions $auth_token_restrictions Defines OAuth token restrictions  [Since version 4.13.0]
     *
     * @return $this
     */
    public function setAuthTokenRestrictions($auth_token_restrictions)
    {
        $this->container['auth_token_restrictions'] = $auth_token_restrictions;

        return $this;
    }

    /**
     * Gets hide_login_input_fields
     *
     * @return bool
     */
    public function getHideLoginInputFields()
    {
        return $this->container['hide_login_input_fields'];
    }

    /**
     * Sets hide_login_input_fields
     *
     * @param bool $hide_login_input_fields Defines if login fields should be hidden  [Since version 4.13.0]
     *
     * @return $this
     */
    public function setHideLoginInputFields($hide_login_input_fields)
    {
        $this->container['hide_login_input_fields'] = $hide_login_input_fields;

        return $this;
    }

    /**
     * Gets media_server_enabled
     *
     * @return bool
     */
    public function getMediaServerEnabled()
    {
        return $this->container['media_server_enabled'];
    }

    /**
     * Sets media_server_enabled
     *
     * @param bool $media_server_enabled `DEPRECATED`: Is media server enabled?  [Deprecated since version 4.12.0]
     *
     * @return $this
     */
    public function setMediaServerEnabled($media_server_enabled)
    {
        $this->container['media_server_enabled'] = $media_server_enabled;

        return $this;
    }

    /**
     * Gets weak_password_enabled
     *
     * @return bool
     */
    public function getWeakPasswordEnabled()
    {
        return $this->container['weak_password_enabled'];
    }

    /**
     * Sets weak_password_enabled
     *
     * @param bool $weak_password_enabled `DEPRECATED`: Allow weak password * A weak password has to fulfill the following criteria:    * is at least 8 characters long    * contains letters and numbers * A strong password has to fulfill the following criteria in addition:    * contains at least one special character    * contains upper and lower case characters Please use `GET /system/config/policies/passwords` API to get configured password policies.  [Deprecated since version 4.14.0]
     *
     * @return $this
     */
    public function setWeakPasswordEnabled($weak_password_enabled)
    {
        $this->container['weak_password_enabled'] = $weak_password_enabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


