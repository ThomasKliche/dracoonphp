<?php
/**
 * NodePermissions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DRACOON
 *
 * REST Web Services for DRACOON<br>Version: 4.14.4  - built at: 2019-11-04 11:46:45<br><br><a title='Developer Information' href='https://developer.dracoon.com'>Developer Information</a>&emsp;&emsp;<a title='Get SDKs on GitHub' href='https://github.com/dracoon'>Get SDKs on GitHub</a>
 *
 * OpenAPI spec version: 4.14.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.9
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * NodePermissions Class Doc Comment
 *
 * @category Class
 * @description Node permissions
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class NodePermissions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'NodePermissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'manage' => 'bool',
        'read' => 'bool',
        'create' => 'bool',
        'change' => 'bool',
        'delete' => 'bool',
        'manage_download_share' => 'bool',
        'manage_upload_share' => 'bool',
        'read_recycle_bin' => 'bool',
        'restore_recycle_bin' => 'bool',
        'delete_recycle_bin' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'manage' => null,
        'read' => null,
        'create' => null,
        'change' => null,
        'delete' => null,
        'manage_download_share' => null,
        'manage_upload_share' => null,
        'read_recycle_bin' => null,
        'restore_recycle_bin' => null,
        'delete_recycle_bin' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'manage' => 'manage',
        'read' => 'read',
        'create' => 'create',
        'change' => 'change',
        'delete' => 'delete',
        'manage_download_share' => 'manageDownloadShare',
        'manage_upload_share' => 'manageUploadShare',
        'read_recycle_bin' => 'readRecycleBin',
        'restore_recycle_bin' => 'restoreRecycleBin',
        'delete_recycle_bin' => 'deleteRecycleBin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'manage' => 'setManage',
        'read' => 'setRead',
        'create' => 'setCreate',
        'change' => 'setChange',
        'delete' => 'setDelete',
        'manage_download_share' => 'setManageDownloadShare',
        'manage_upload_share' => 'setManageUploadShare',
        'read_recycle_bin' => 'setReadRecycleBin',
        'restore_recycle_bin' => 'setRestoreRecycleBin',
        'delete_recycle_bin' => 'setDeleteRecycleBin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'manage' => 'getManage',
        'read' => 'getRead',
        'create' => 'getCreate',
        'change' => 'getChange',
        'delete' => 'getDelete',
        'manage_download_share' => 'getManageDownloadShare',
        'manage_upload_share' => 'getManageUploadShare',
        'read_recycle_bin' => 'getReadRecycleBin',
        'restore_recycle_bin' => 'getRestoreRecycleBin',
        'delete_recycle_bin' => 'getDeleteRecycleBin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['manage'] = isset($data['manage']) ? $data['manage'] : null;
        $this->container['read'] = isset($data['read']) ? $data['read'] : null;
        $this->container['create'] = isset($data['create']) ? $data['create'] : null;
        $this->container['change'] = isset($data['change']) ? $data['change'] : null;
        $this->container['delete'] = isset($data['delete']) ? $data['delete'] : null;
        $this->container['manage_download_share'] = isset($data['manage_download_share']) ? $data['manage_download_share'] : null;
        $this->container['manage_upload_share'] = isset($data['manage_upload_share']) ? $data['manage_upload_share'] : null;
        $this->container['read_recycle_bin'] = isset($data['read_recycle_bin']) ? $data['read_recycle_bin'] : null;
        $this->container['restore_recycle_bin'] = isset($data['restore_recycle_bin']) ? $data['restore_recycle_bin'] : null;
        $this->container['delete_recycle_bin'] = isset($data['delete_recycle_bin']) ? $data['delete_recycle_bin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['manage'] === null) {
            $invalidProperties[] = "'manage' can't be null";
        }
        if ($this->container['read'] === null) {
            $invalidProperties[] = "'read' can't be null";
        }
        if ($this->container['create'] === null) {
            $invalidProperties[] = "'create' can't be null";
        }
        if ($this->container['change'] === null) {
            $invalidProperties[] = "'change' can't be null";
        }
        if ($this->container['delete'] === null) {
            $invalidProperties[] = "'delete' can't be null";
        }
        if ($this->container['manage_download_share'] === null) {
            $invalidProperties[] = "'manage_download_share' can't be null";
        }
        if ($this->container['manage_upload_share'] === null) {
            $invalidProperties[] = "'manage_upload_share' can't be null";
        }
        if ($this->container['read_recycle_bin'] === null) {
            $invalidProperties[] = "'read_recycle_bin' can't be null";
        }
        if ($this->container['restore_recycle_bin'] === null) {
            $invalidProperties[] = "'restore_recycle_bin' can't be null";
        }
        if ($this->container['delete_recycle_bin'] === null) {
            $invalidProperties[] = "'delete_recycle_bin' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets manage
     *
     * @return bool
     */
    public function getManage()
    {
        return $this->container['manage'];
    }

    /**
     * Sets manage
     *
     * @param bool $manage User / Group may grant all of the above permissions to other users and groups independently, may update room metadata and create / update / delete subordinary rooms, has all permissions.
     *
     * @return $this
     */
    public function setManage($manage)
    {
        $this->container['manage'] = $manage;

        return $this;
    }

    /**
     * Gets read
     *
     * @return bool
     */
    public function getRead()
    {
        return $this->container['read'];
    }

    /**
     * Sets read
     *
     * @param bool $read User / Group may see all rooms, files and folders in the room and download everything, copy files from this room.
     *
     * @return $this
     */
    public function setRead($read)
    {
        $this->container['read'] = $read;

        return $this;
    }

    /**
     * Gets create
     *
     * @return bool
     */
    public function getCreate()
    {
        return $this->container['create'];
    }

    /**
     * Sets create
     *
     * @param bool $create User / Group may upload files, create folders and copy / move files to this room, overwriting is not possible.
     *
     * @return $this
     */
    public function setCreate($create)
    {
        $this->container['create'] = $create;

        return $this;
    }

    /**
     * Gets change
     *
     * @return bool
     */
    public function getChange()
    {
        return $this->container['change'];
    }

    /**
     * Sets change
     *
     * @param bool $change User / Group may update metadata of nodes: rename files and folders, change classification, etc.
     *
     * @return $this
     */
    public function setChange($change)
    {
        $this->container['change'] = $change;

        return $this;
    }

    /**
     * Gets delete
     *
     * @return bool
     */
    public function getDelete()
    {
        return $this->container['delete'];
    }

    /**
     * Sets delete
     *
     * @param bool $delete User / Group may overwrite and remove files / folders, move files from this room.
     *
     * @return $this
     */
    public function setDelete($delete)
    {
        $this->container['delete'] = $delete;

        return $this;
    }

    /**
     * Gets manage_download_share
     *
     * @return bool
     */
    public function getManageDownloadShare()
    {
        return $this->container['manage_download_share'];
    }

    /**
     * Sets manage_download_share
     *
     * @param bool $manage_download_share User / Group may create Download Shares for files and containers view all previously created Download Shares in this room.
     *
     * @return $this
     */
    public function setManageDownloadShare($manage_download_share)
    {
        $this->container['manage_download_share'] = $manage_download_share;

        return $this;
    }

    /**
     * Gets manage_upload_share
     *
     * @return bool
     */
    public function getManageUploadShare()
    {
        return $this->container['manage_upload_share'];
    }

    /**
     * Sets manage_upload_share
     *
     * @param bool $manage_upload_share User / Group may create Upload Shares for containers, view all previously created Upload Shares in this room.
     *
     * @return $this
     */
    public function setManageUploadShare($manage_upload_share)
    {
        $this->container['manage_upload_share'] = $manage_upload_share;

        return $this;
    }

    /**
     * Gets read_recycle_bin
     *
     * @return bool
     */
    public function getReadRecycleBin()
    {
        return $this->container['read_recycle_bin'];
    }

    /**
     * Sets read_recycle_bin
     *
     * @param bool $read_recycle_bin User / Group may look up files / folders in the recycle bin.
     *
     * @return $this
     */
    public function setReadRecycleBin($read_recycle_bin)
    {
        $this->container['read_recycle_bin'] = $read_recycle_bin;

        return $this;
    }

    /**
     * Gets restore_recycle_bin
     *
     * @return bool
     */
    public function getRestoreRecycleBin()
    {
        return $this->container['restore_recycle_bin'];
    }

    /**
     * Sets restore_recycle_bin
     *
     * @param bool $restore_recycle_bin User / Group may restore files / folders from recycle bin - room permissions required.
     *
     * @return $this
     */
    public function setRestoreRecycleBin($restore_recycle_bin)
    {
        $this->container['restore_recycle_bin'] = $restore_recycle_bin;

        return $this;
    }

    /**
     * Gets delete_recycle_bin
     *
     * @return bool
     */
    public function getDeleteRecycleBin()
    {
        return $this->container['delete_recycle_bin'];
    }

    /**
     * Sets delete_recycle_bin
     *
     * @param bool $delete_recycle_bin User / Group may permanently remove files / folders from the recycle bin.
     *
     * @return $this
     */
    public function setDeleteRecycleBin($delete_recycle_bin)
    {
        $this->container['delete_recycle_bin'] = $delete_recycle_bin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


